!function(t){"use strict";var i=t.jCarousel={};i.version="0.3.4";var s=/^([+\-]=)?(.+)$/;i.parseTarget=function(t){var i=!1,e="object"!=typeof t?s.exec(t):null;return e?(t=parseInt(e[2],10)||0,e[1]&&(i=!0,"-="===e[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:i}},i.detectCarousel=function(t){for(var i;t.length>0;){if(i=t.filter("[data-jcarousel]"),i.length>0)return i;if(i=t.find("[data-jcarousel]"),i.length>0)return i;t=t.parent()}return null},i.base=function(s){return{version:i.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+s.toLowerCase(),!0).data(s,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(s).removeAttr("data-"+s.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(i,s){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof i){if("undefined"==typeof s)return"undefined"==typeof this._options[i]?null:this._options[i];this._options[i]=s}else this._options=t.extend({},this._options,i);return this},carousel:function(){return this._carousel||(this._carousel=i.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+s+'"')),this._carousel},_trigger:function(i,e,r){var n,o=!1;return r=[this].concat(r||[]),(e||this._element).each(function(){n=t.Event((s+":"+i).toLowerCase()),t(this).trigger(n,r),n.isDefaultPrevented()&&(o=!0)}),!o}}},i.plugin=function(s,e){var r=t[s]=function(i,s){this._element=t(i),this.options(s),this._init(),this.create()};return r.fn=r.prototype=t.extend({},i.base(s),e),t.fn[s]=function(i){var e=Array.prototype.slice.call(arguments,1),n=this;return"string"==typeof i?this.each(function(){var r=t(this).data(s);if(!r)return t.error("Cannot call methods on "+s+' prior to initialization; attempted to call method "'+i+'"');if(!t.isFunction(r[i])||"_"===i.charAt(0))return t.error('No such method "'+i+'" for '+s+" instance");var o=r[i].apply(r,e);return o!==r&&"undefined"!=typeof o?(n=o,!1):void 0}):this.each(function(){var e=t(this).data(s);e instanceof r?e.reload(i):new r(this,i)}),n},r}}(jQuery),function(t,i){"use strict";var s=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(i).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(i).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(i){if("rtl"===(""+i.attr("dir")).toLowerCase())return!0;var s=!1;return i.parents("[dir]").each(function(){return/rtl/i.test(t(this).attr("dir"))?(s=!0,!1):void 0}),s}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var i=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var s={left:0,top:0};return i.length>0&&(this._prepare(i),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,s[this.lt]=this._position(i)+"px"),this.move(s),this},list:function(){if(null===this._list){var i=this.options("list");this._list=t.isFunction(i)?i.call(this):this._element.find(i)}return this._list},items:function(){if(null===this._items){var i=this.options("items");this._items=(t.isFunction(i)?i.call(this):this.list().find(i)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var i,e=this,r=this.list().position()[this.lt],n=t(),o=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(r+=this.list().width()-this.clipping()),this.items().each(function(){if(n=t(this),o)return!1;var l=e.dimension(n);if(r+=l,r>=0){if(i=l-s(n.css("margin-"+a)),!(Math.abs(r)-l+i/2<=0))return!1;o=!0}}),n},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),i=this.items().length-1,s=this.options("center")?this._target:this._last;return!!(i>=0&&!this.underflow&&(t&&"first"!==t||this.index(s)<i||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(i,s,e){if(this.animating)return this;if(!1===this._trigger("scroll",null,[i,s]))return this;t.isFunction(s)&&(e=s,s=!0);var r=t.jCarousel.parseTarget(i);if(r.relative){var n,o,a,l,h,u,c,f,d=this.items().length-1,_=Math.abs(r.target),p=this.options("wrap");if(r.target>0){var g=this.index(this._last);if(g>=d&&this.tail)this.inTail?"both"===p||"last"===p?this._scroll(0,s,e):t.isFunction(e)&&e.call(this,!1):this._scrollTail(s,e);else if(n=this.index(this._target),this.underflow&&n===d&&("circular"===p||"both"===p||"last"===p)||!this.underflow&&g===d&&("both"===p||"last"===p))this._scroll(0,s,e);else if(a=n+_,this.circular&&a>d){for(f=d,h=this.items().get(-1);f++<a;)h=this.items().eq(0),u=this._visible.index(h)>=0,u&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(h),u||(c={},c[this.lt]=this.dimension(h),this.moveBy(c)),this._items=null;this._scroll(h,s,e)}else this._scroll(Math.min(a,d),s,e)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-_+1,0),s,e);else if(o=this.index(this._first),n=this.index(this._target),l=this.underflow?n:o,a=l-_,0>=l&&(this.underflow&&"circular"===p||"both"===p||"first"===p))this._scroll(d,s,e);else if(this.circular&&0>a){for(f=a,h=this.items().get(0);f++<0;){h=this.items().eq(-1),u=this._visible.index(h)>=0,u&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(h),this._items=null;var v=this.dimension(h);c={},c[this.lt]=-v,this.moveBy(c)}this._scroll(h,s,e)}else this._scroll(Math.max(a,0),s,e)}else this._scroll(r.target,s,e);return this._trigger("scrollend"),this},moveBy:function(t,i){var e=this.list().position(),r=1,n=0;return this.rtl&&!this.vertical&&(r=-1,this.relative&&(n=this.list().width()-this.clipping())),t.left&&(t.left=e.left+n+s(t.left)*r+"px"),t.top&&(t.top=e.top+n+s(t.top)*r+"px"),this.move(t,i)},move:function(i,s){s=s||{};var e=this.options("transitions"),r=!!e,n=!!e.transforms,o=!!e.transforms3d,a=s.duration||0,l=this.list();if(!r&&a>0)return void l.animate(i,s);var h=s.complete||t.noop,u={};if(r){var c={transitionDuration:l.css("transitionDuration"),transitionTimingFunction:l.css("transitionTimingFunction"),transitionProperty:l.css("transitionProperty")},f=h;h=function(){t(this).css(c),f.call(this)},u={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:e.easing||s.easing,transitionProperty:a>0?function(){return n||o?"all":i.left?"left":"top"}():"none",transform:"none"}}o?u.transform="translate3d("+(i.left||0)+","+(i.top||0)+",0)":n?u.transform="translate("+(i.left||0)+","+(i.top||0)+")":t.extend(u,i),r&&a>0&&l.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",h),l.css(u),0>=a&&l.each(function(){h.call(this)})},_scroll:function(i,s,e){if(this.animating)return t.isFunction(e)&&e.call(this,!1),this;if("object"!=typeof i?i=this.items().eq(i):"undefined"==typeof i.jquery&&(i=t(i)),0===i.length)return t.isFunction(e)&&e.call(this,!1),this;this.inTail=!1,this._prepare(i);var r=this._position(i),n=this.list().position()[this.lt];if(r===n)return t.isFunction(e)&&e.call(this,!1),this;var o={};return o[this.lt]=r+"px",this._animate(o,s,e),this},_scrollTail:function(i,s){if(this.animating||!this.tail)return t.isFunction(s)&&s.call(this,!1),this;var e=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(e+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?e+=this.tail:e-=this.tail,this.inTail=!0;var r={};return r[this.lt]=e+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(r,i,s),this},_animate:function(i,s,e){if(e=e||t.noop,!1===this._trigger("animate"))return e.call(this,!1),this;this.animating=!0;var r=this.options("animation"),n=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),e.call(this,!0)},this),o="object"==typeof r?t.extend({},r):{duration:r},a=o.complete||t.noop;return s===!1?o.duration=0:"undefined"!=typeof t.fx.speeds[o.duration]&&(o.duration=t.fx.speeds[o.duration]),o.complete=function(){n(),a.call(this)},this.move(i,o),this},_prepare:function(i){var e,r,n,o,a=this.index(i),l=a,h=this.dimension(i),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",f=this.options("center"),d={target:i,first:i,last:i,visible:i,fullyvisible:u>=h?i:t()};if(f&&(h/=2,u/=2),u>h)for(;;){if(e=this.items().eq(++l),0===e.length){if(!this.circular)break;if(e=this.items().eq(0),i.get(0)===e.get(0))break;if(r=this._visible.index(e)>=0,r&&e.after(e.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(e),!r){var _={};_[this.lt]=this.dimension(e),this.moveBy(_)}this._items=null}if(o=this.dimension(e),0===o)break;if(h+=o,d.last=e,d.visible=d.visible.add(e),n=s(e.css("margin-"+c)),u>=h-n&&(d.fullyvisible=d.fullyvisible.add(e)),h>=u)break}if(!this.circular&&!f&&u>h)for(l=a;;){if(--l<0)break;if(e=this.items().eq(l),0===e.length)break;if(o=this.dimension(e),0===o)break;if(h+=o,d.first=e,d.visible=d.visible.add(e),n=s(e.css("margin-"+c)),u>=h-n&&(d.fullyvisible=d.fullyvisible.add(e)),h>=u)break}return this._update(d),this.tail=0,f||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(d.last)!==this.items().length-1||(h-=s(d.last.css("margin-"+c)),h>u&&(this.tail=h-u)),this},_position:function(t){var i=this._first,s=i.position()[this.lt],e=this.options("center"),r=e?this.clipping()/2-this.dimension(i)/2:0;return this.rtl&&!this.vertical?(s-=this.relative?this.list().width()-this.dimension(i):this.clipping()-this.dimension(i),s+=r):s-=r,!e&&(this.index(t)>this.index(i)||this.inTail)&&this.tail?(s=this.rtl&&!this.vertical?s-this.tail:s+this.tail,this.inTail=!0):this.inTail=!1,-s},_update:function(i){var s,e=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},n=this.index(i.first||r.first)<this.index(r.first),o=function(s){var o=[],a=[];i[s].each(function(){r[s].index(this)<0&&o.push(this)}),r[s].each(function(){i[s].index(this)<0&&a.push(this)}),n?o=o.reverse():a=a.reverse(),e._trigger(s+"in",t(o)),e._trigger(s+"out",t(a)),e["_"+s]=i[s]};for(s in i)o(s);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(i,s,e){var r,n=t.jCarousel.parseTarget(i),o=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(r=n.relative?n.target<0?Math.max(0,o+n.target):a+n.target:"object"!=typeof n.target?n.target:this.index(n.target),o>r)return this.scroll(r,s,e);if(r>=o&&a>=r)return t.isFunction(e)&&e.call(this,!1),this;for(var l,h=this.items(),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",f=0;;){if(l=h.eq(r),0===l.length)break;if(f+=this.dimension(l),f>=u){var d=parseFloat(l.css("margin-"+c))||0;f-d!==u&&r++;break}if(0>=r)break;r--}return this.scroll(r,s,e)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(i){i.preventDefault();var s=this.options("method");t.isFunction(s)?s.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var i,s=t.jCarousel.parseTarget(this.options("target")),e=this.carousel();if(s.relative)i=e.jcarousel(s.target>0?"hasNext":"hasPrev");else{var r="object"!=typeof s.target?e.jcarousel("items").eq(s.target):s.target;i=e.jcarousel("target").index(r)>=0}return this._active!==i&&(this._trigger(i?"active":"inactive"),this._active=i),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var i=this.options("perPage");if(this._pages={},this._items={},t.isFunction(i)&&(i=i.call(this)),null==i)this._pages=this._calculatePages();else for(var s,e=parseInt(i,10)||0,r=this._getCarouselItems(),n=1,o=0;;){if(s=r.eq(o++),0===s.length)break;this._pages[n]?this._pages[n]=this._pages[n].add(s):this._pages[n]=s,o%e===0&&n++}this._clear();var a=this,l=this.carousel().data("jcarousel"),h=this._element,u=this.options("item"),c=this._getCarouselItems().length;t.each(this._pages,function(i,s){var e=a._items[i]=t(u.call(a,i,s));e.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=s.eq(0);if(l.circular){var e=l.index(l.target()),r=l.index(t);parseFloat(i)>parseFloat(a._currentPage)?e>r&&(t="+="+(c-e+r)):r>e&&(t="-="+(e+(c-r)))}l[this.options("method")](t)},a)),h.append(e)}),this._update()},_update:function(){var i,s=this.carousel().jcarousel("target");t.each(this._pages,function(t,e){return e.each(function(){return s.is(this)?(i=t,!1):void 0}),i?!1:void 0}),this._currentPage!==i&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[i])),this._currentPage=i},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,i,s=this.carousel().data("jcarousel"),e=this._getCarouselItems(),r=s.clipping(),n=0,o=0,a=1,l={};;){if(t=e.eq(o++),0===t.length)break;i=s.dimension(t),n+i>r&&(a++,n=0),n+=i,l[a]?l[a]=l[a].add(t):l[a]=t}return l},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,i){"use strict";var s,e,r={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(r,function(t,r){return"undefined"!=typeof i[t]?(s=t,e=r,!1):void 0}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){i[s]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(i).on(e,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(i).off(e,this.onVisibilityChange)},_start:function(){return this._stop(),this._started?(this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this):void 0},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),$(function(){$(".jcarousel").jcarousel({animation:"slow",wrap:"circular"}),$(".jcarousel-prev").jcarouselControl({target:"-=1"}),$(".jcarousel-next").jcarouselControl({target:"+=1"}),$(".jcarousel").jcarouselAutoscroll({interval:5e3,target:"+=1",autostart:!0})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiJCIsImpDYXJvdXNlbCIsInZlcnNpb24iLCJyUmVsYXRpdmVUYXJnZXQiLCJwYXJzZVRhcmdldCIsInRhcmdldCIsInJlbGF0aXZlIiwicGFydHMiLCJleGVjIiwicGFyc2VJbnQiLCJkZXRlY3RDYXJvdXNlbCIsImVsZW1lbnQiLCJjYXJvdXNlbCIsImxlbmd0aCIsImZpbHRlciIsImZpbmQiLCJwYXJlbnQiLCJiYXNlIiwicGx1Z2luTmFtZSIsIl9vcHRpb25zIiwiX2VsZW1lbnQiLCJfY2Fyb3VzZWwiLCJfaW5pdCIsIm5vb3AiLCJfY3JlYXRlIiwiX2Rlc3Ryb3kiLCJfcmVsb2FkIiwiY3JlYXRlIiwidGhpcyIsImF0dHIiLCJ0b0xvd2VyQ2FzZSIsImRhdGEiLCJfdHJpZ2dlciIsImRlc3Ryb3kiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0ciIsInJlbG9hZCIsIm9wdGlvbnMiLCJrZXkiLCJ2YWx1ZSIsImFyZ3VtZW50cyIsImV4dGVuZCIsImVycm9yIiwidHlwZSIsImV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsImNvbmNhdCIsImVhY2giLCJFdmVudCIsInRyaWdnZXIiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJwbHVnaW4iLCJwbHVnaW5Qcm90b3R5cGUiLCJQbHVnaW4iLCJmbiIsInByb3RvdHlwZSIsImFyZ3MiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsInJldHVyblZhbHVlIiwiaW5zdGFuY2UiLCJpc0Z1bmN0aW9uIiwiY2hhckF0IiwibWV0aG9kVmFsdWUiLCJhcHBseSIsImpRdWVyeSIsIndpbmRvdyIsInRvRmxvYXQiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiYW5pbWF0aW5nIiwidGFpbCIsImluVGFpbCIsInJlc2l6ZVRpbWVyIiwibHQiLCJ2ZXJ0aWNhbCIsInJ0bCIsImNpcmN1bGFyIiwidW5kZXJmbG93IiwibGlzdCIsImNoaWxkcmVuIiwiZXEiLCJpdGVtcyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb25zIiwid3JhcCIsImNlbnRlciIsIl9saXN0IiwiX2l0ZW1zIiwiX3RhcmdldCIsIl9maXJzdCIsIl9sYXN0IiwiX3Zpc2libGUiLCJfZnVsbHl2aXNpYmxlIiwic2VsZiIsIm9uV2luZG93UmVzaXplIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIm9uIiwib2ZmIiwiaGVpZ2h0Iiwid2lkdGgiLCJmb3VuZCIsInBhcmVudHMiLCJ0ZXN0IiwiY3NzIiwiaXRlbSIsImluZGV4IiwiY2xvc2VzdCIsInByb3BzIiwibGVmdCIsInRvcCIsIl9wcmVwYXJlIiwicmVtb3ZlIiwiX3Bvc2l0aW9uIiwibW92ZSIsIm9wdGlvbiIsIm5vdCIsInBvcyIsInBvc2l0aW9uIiwic3RvcCIsImxyYiIsImNsaXBwaW5nIiwiZGltIiwiZGltZW5zaW9uIiwiTWF0aCIsImFicyIsImZpcnN0IiwibGFzdCIsInZpc2libGUiLCJmdWxseXZpc2libGUiLCJoYXNOZXh0IiwiZW5kIiwiY2hlY2siLCJoYXNQcmV2Iiwic2Nyb2xsIiwiYW5pbWF0ZSIsImNhbGxiYWNrIiwicGFyc2VkIiwiY3VycmVudCIsInN0YXJ0IiwiY3VyciIsImlzVmlzaWJsZSIsImkiLCJfc2Nyb2xsIiwiX3Njcm9sbFRhaWwiLCJnZXQiLCJhZnRlciIsImNsb25lIiwiYXBwZW5kIiwibW92ZUJ5IiwibWluIiwibWF4IiwicHJlcGVuZCIsInByb3BlcnRpZXMiLCJvcHRzIiwibXVsdGlwbGllciIsImNvcnJlY3Rpb24iLCJ0cmFuc2Zvcm1zIiwidHJhbnNmb3JtczNkIiwiZHVyYXRpb24iLCJjb21wbGV0ZSIsImJhY2t1cCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIm9sZENvbXBsZXRlIiwiZWFzaW5nIiwidHJhbnNmb3JtIiwib25lIiwianF1ZXJ5IiwiY3VyclBvcyIsIl9hbmltYXRlIiwiX3VwZGF0ZSIsIm5leHQiLCJhZGQiLCJwcm94eSIsImMiLCJmeCIsInNwZWVkcyIsIm1hcmdpbiIsImlkeCIsIndoIiwiY2xpcCIsInVwZGF0ZSIsImNlbnRlck9mZnNldCIsImJhY2siLCJkb1VwZGF0ZSIsImVsSW4iLCJlbE91dCIsInB1c2giLCJyZXZlcnNlIiwiamNhcm91c2VsIiwic2Nyb2xsSW50b1ZpZXciLCJtZXRob2QiLCJfYWN0aXZlIiwib25EZXN0cm95Iiwib25SZWxvYWQiLCJvbkV2ZW50IiwiZSIsInByZXZlbnREZWZhdWx0IiwiYWN0aXZlIiwicGVyUGFnZSIsInBhZ2UiLCJfY2Fyb3VzZWxJdGVtcyIsIl9wYWdlcyIsIl9jdXJyZW50UGFnZSIsIm9uU2Nyb2xsIiwiX2NsZWFyIiwiX2NhbGN1bGF0ZVBhZ2VzIiwicHAiLCJfZ2V0Q2Fyb3VzZWxJdGVtcyIsIm51bUNhcm91c2VsSXRlbXMiLCJjYXJvdXNlbEl0ZW1zIiwiY3Vyckl0ZW0iLCJjdXJyZW50SW5kZXgiLCJuZXdJbmRleCIsImN1cnJlbnRQYWdlIiwiaXMiLCJyZWxvYWRDYXJvdXNlbEl0ZW1zIiwiZW1wdHkiLCJwYWdlcyIsImRvY3VtZW50IiwiaGlkZGVuUHJvcCIsInZpc2liaWxpdHlDaGFuZ2VFdmVudCIsInZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWVzIiwiaGlkZGVuIiwibW96SGlkZGVuIiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJpbnRlcnZhbCIsImF1dG9zdGFydCIsIl90aW1lciIsIl9zdGFydGVkIiwib25BbmltYXRlRW5kIiwiX3N0YXJ0Iiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiX3N0b3AiLCJqY2Fyb3VzZWxDb250cm9sIiwiamNhcm91c2VsQXV0b3Njcm9sbCJdLCJtYXBwaW5ncyI6IkNBTUMsU0FBU0EsR0FDTixZQUVBLElBQUlDLEdBQVlELEVBQUVDLFlBRWxCQSxHQUFVQyxRQUFVLE9BRXBCLElBQUlDLEdBQWtCLGlCQUV0QkYsR0FBVUcsWUFBYyxTQUFTQyxHQUM3QixHQUFJQyxJQUFXLEVBQ1hDLEVBQTZCLGdCQUFYRixHQUNIRixFQUFnQkssS0FBS0gsR0FDckIsSUFlbkIsT0FiSUUsSUFDQUYsRUFBU0ksU0FBU0YsRUFBTSxHQUFJLEtBQU8sRUFFL0JBLEVBQU0sS0FDTkQsR0FBVyxFQUNNLE9BQWJDLEVBQU0sS0FDTkYsR0FBVSxNQUdPLGdCQUFYQSxLQUNkQSxFQUFTSSxTQUFTSixFQUFRLEtBQU8sSUFJakNBLE9BQVFBLEVBQ1JDLFNBQVVBLElBSWxCTCxFQUFVUyxlQUFpQixTQUFTQyxHQUdoQyxJQUZBLEdBQUlDLEdBRUdELEVBQVFFLE9BQVMsR0FBRyxDQUd2QixHQUZBRCxFQUFXRCxFQUFRRyxPQUFPLG9CQUV0QkYsRUFBU0MsT0FBUyxFQUNsQixNQUFPRCxFQUtYLElBRkFBLEVBQVdELEVBQVFJLEtBQUssb0JBRXBCSCxFQUFTQyxPQUFTLEVBQ2xCLE1BQU9ELEVBR1hELEdBQVVBLEVBQVFLLFNBR3RCLE1BQU8sT0FHWGYsRUFBVWdCLEtBQU8sU0FBU0MsR0FDdEIsT0FDSWhCLFFBQVVELEVBQVVDLFFBQ3BCaUIsWUFDQUMsU0FBVyxLQUNYQyxVQUFXLEtBQ1hDLE1BQVd0QixFQUFFdUIsS0FDYkMsUUFBV3hCLEVBQUV1QixLQUNiRSxTQUFXekIsRUFBRXVCLEtBQ2JHLFFBQVcxQixFQUFFdUIsS0FDYkksT0FBUSxXQUtKLE1BSkFDLE1BQUtSLFNBQ0FTLEtBQUssUUFBVVgsRUFBV1ksZUFBZSxHQUN6Q0MsS0FBS2IsRUFBWVUsT0FFbEIsSUFBVUEsS0FBS0ksU0FBUyxVQUNqQkosTUFHWEEsS0FBS0osVUFFTEksS0FBS0ksU0FBUyxhQUVQSixPQUVYSyxRQUFTLFdBQ0wsT0FBSSxJQUFVTCxLQUFLSSxTQUFTLFdBQ2pCSixNQUdYQSxLQUFLSCxXQUVMRyxLQUFLSSxTQUFTLGNBRWRKLEtBQUtSLFNBQ0FjLFdBQVdoQixHQUNYaUIsV0FBVyxRQUFVakIsRUFBV1ksZUFFOUJGLE9BRVhRLE9BQVEsU0FBU0MsR0FDYixPQUFJLElBQVVULEtBQUtJLFNBQVMsVUFDakJKLE1BR1BTLEdBQ0FULEtBQUtTLFFBQVFBLEdBR2pCVCxLQUFLRixVQUVMRSxLQUFLSSxTQUFTLGFBRVBKLE9BRVhqQixRQUFTLFdBQ0wsTUFBT2lCLE1BQUtSLFVBRWhCaUIsUUFBUyxTQUFTQyxFQUFLQyxHQUNuQixHQUF5QixJQUFyQkMsVUFBVTNCLE9BQ1YsTUFBT2IsR0FBRXlDLFVBQVdiLEtBQUtULFNBRzdCLElBQW1CLGdCQUFSbUIsR0FBa0IsQ0FDekIsR0FBcUIsbUJBQVZDLEdBQ1AsTUFBcUMsbUJBQXZCWCxNQUFLVCxTQUFTbUIsR0FDcEIsS0FDQVYsS0FBS1QsU0FBU21CLEVBRzFCVixNQUFLVCxTQUFTbUIsR0FBT0MsTUFFckJYLE1BQUtULFNBQVduQixFQUFFeUMsVUFBV2IsS0FBS1QsU0FBVW1CLEVBR2hELE9BQU9WLE9BRVhoQixTQUFVLFdBU04sTUFSS2dCLE1BQUtQLFlBQ05PLEtBQUtQLFVBQVlwQixFQUFVUyxlQUFla0IsS0FBS1MsUUFBUSxhQUFlVCxLQUFLUixVQUV0RVEsS0FBS1AsV0FDTnJCLEVBQUUwQyxNQUFNLHlDQUEyQ3hCLEVBQWEsTUFJakVVLEtBQUtQLFdBRWhCVyxTQUFVLFNBQVNXLEVBQU1oQyxFQUFTb0IsR0FDOUIsR0FBSWEsR0FDQUMsR0FBbUIsQ0FjdkIsT0FaQWQsSUFBUUgsTUFBTWtCLE9BQU9mLFFBRXBCcEIsR0FBV2lCLEtBQUtSLFVBQVUyQixLQUFLLFdBQzVCSCxFQUFRNUMsRUFBRWdELE9BQU85QixFQUFhLElBQU15QixHQUFNYixlQUUxQzlCLEVBQUU0QixNQUFNcUIsUUFBUUwsRUFBT2IsR0FFbkJhLEVBQU1NLHVCQUNOTCxHQUFtQixNQUluQkEsS0FLcEI1QyxFQUFVa0QsT0FBUyxTQUFTakMsRUFBWWtDLEdBQ3BDLEdBQUlDLEdBQVNyRCxFQUFFa0IsR0FBYyxTQUFTUCxFQUFTMEIsR0FDM0NULEtBQUtSLFNBQVdwQixFQUFFVyxHQUNsQmlCLEtBQUtTLFFBQVFBLEdBRWJULEtBQUtOLFFBQ0xNLEtBQUtELFNBb0RULE9BakRBMEIsR0FBT0MsR0FBS0QsRUFBT0UsVUFBWXZELEVBQUV5QyxVQUU3QnhDLEVBQVVnQixLQUFLQyxHQUNma0MsR0FHSnBELEVBQUVzRCxHQUFHcEMsR0FBYyxTQUFTbUIsR0FDeEIsR0FBSW1CLEdBQWNDLE1BQU1GLFVBQVVHLE1BQU1DLEtBQUtuQixVQUFXLEdBQ3BEb0IsRUFBY2hDLElBc0NsQixPQXBDdUIsZ0JBQVpTLEdBQ1BULEtBQUttQixLQUFLLFdBQ04sR0FBSWMsR0FBVzdELEVBQUU0QixNQUFNRyxLQUFLYixFQUU1QixLQUFLMkMsRUFDRCxNQUFPN0QsR0FBRTBDLE1BQ0wsMEJBQTRCeEIsRUFBYSx1REFDVm1CLEVBQVUsSUFJakQsS0FBS3JDLEVBQUU4RCxXQUFXRCxFQUFTeEIsS0FBbUMsTUFBdEJBLEVBQVEwQixPQUFPLEdBQ25ELE1BQU8vRCxHQUFFMEMsTUFDTCxtQkFBcUJMLEVBQVUsU0FBV25CLEVBQWEsWUFJL0QsSUFBSThDLEdBQWNILEVBQVN4QixHQUFTNEIsTUFBTUosRUFBVUwsRUFFcEQsT0FBSVEsS0FBZ0JILEdBQW1DLG1CQUFoQkcsSUFDbkNKLEVBQWNJLEdBQ1AsR0FGWCxTQU1KcEMsS0FBS21CLEtBQUssV0FDTixHQUFJYyxHQUFXN0QsRUFBRTRCLE1BQU1HLEtBQUtiLEVBRXhCMkMsYUFBb0JSLEdBQ3BCUSxFQUFTekIsT0FBT0MsR0FFaEIsR0FBSWdCLEdBQU96QixLQUFNUyxLQUt0QnVCLEdBR0pQLElBRWJhLFFBRUQsU0FBU2xFLEVBQUdtRSxHQUNULFlBRUEsSUFBSUMsR0FBVSxTQUFTQyxHQUNuQixNQUFPQyxZQUFXRCxJQUFRLEVBRzlCckUsR0FBRUMsVUFBVWtELE9BQU8sYUFDZm9CLFdBQWEsRUFDYkMsS0FBYSxFQUNiQyxRQUFhLEVBQ2JDLFlBQWEsS0FDYkMsR0FBYSxLQUNiQyxVQUFhLEVBQ2JDLEtBQWEsRUFDYkMsVUFBYSxFQUNiQyxXQUFhLEVBQ2J6RSxVQUFhLEVBRWJhLFVBQ0k2RCxLQUFNLFdBQ0YsTUFBT3BELE1BQUtqQixVQUFVc0UsV0FBV0MsR0FBRyxJQUV4Q0MsTUFBTyxXQUNILE1BQU92RCxNQUFLb0QsT0FBT0MsWUFFdkJHLFVBQWEsSUFDYkMsYUFBYSxFQUNiQyxLQUFhLEtBQ2JWLFNBQWEsS0FDYkMsSUFBYSxLQUNiVSxRQUFhLEdBSWpCQyxNQUFlLEtBQ2ZDLE9BQWUsS0FDZkMsUUFBZTFGLElBQ2YyRixPQUFlM0YsSUFDZjRGLE1BQWU1RixJQUNmNkYsU0FBZTdGLElBQ2Y4RixjQUFlOUYsSUFDZnNCLE1BQU8sV0FDSCxHQUFJeUUsR0FBT25FLElBWVgsT0FWQUEsTUFBS29FLGVBQWlCLFdBQ2RELEVBQUtyQixhQUNMdUIsYUFBYUYsRUFBS3JCLGFBR3RCcUIsRUFBS3JCLFlBQWN3QixXQUFXLFdBQzFCSCxFQUFLM0QsVUFDTixNQUdBUixNQUVYSixRQUFTLFdBQ0xJLEtBQUtGLFVBRUwxQixFQUFFbUUsR0FBUWdDLEdBQUcsbUJBQW9CdkUsS0FBS29FLGlCQUUxQ3ZFLFNBQVUsV0FDTnpCLEVBQUVtRSxHQUFRaUMsSUFBSSxtQkFBb0J4RSxLQUFLb0UsaUJBRTNDdEUsUUFBUyxXQUNMRSxLQUFLZ0QsU0FBV2hELEtBQUtTLFFBQVEsWUFFUixNQUFqQlQsS0FBS2dELFdBQ0xoRCxLQUFLZ0QsU0FBV2hELEtBQUtvRCxPQUFPcUIsU0FBV3pFLEtBQUtvRCxPQUFPc0IsU0FHdkQxRSxLQUFLaUQsSUFBTWpELEtBQUtTLFFBQVEsT0FFUixNQUFaVCxLQUFLaUQsTUFDTGpELEtBQUtpRCxJQUFPLFNBQVNsRSxHQUNqQixHQUFpRCxTQUE1QyxHQUFLQSxFQUFRa0IsS0FBSyxRQUFRQyxjQUMzQixPQUFPLENBR1gsSUFBSXlFLElBQVEsQ0FTWixPQVBBNUYsR0FBUTZGLFFBQVEsU0FBU3pELEtBQUssV0FDMUIsTUFBSSxPQUFTMEQsS0FBS3pHLEVBQUU0QixNQUFNQyxLQUFLLFNBQzNCMEUsR0FBUSxHQUNELEdBRlgsU0FNR0EsR0FDVDNFLEtBQUtSLFdBR1hRLEtBQUsrQyxHQUFLL0MsS0FBS2dELFNBQVcsTUFBUSxPQUdsQ2hELEtBQUt0QixTQUEyQyxhQUFoQ3NCLEtBQUtvRCxPQUFPMEIsSUFBSSxZQUdoQzlFLEtBQUs0RCxNQUFTLEtBQ2Q1RCxLQUFLNkQsT0FBUyxJQUVkLElBQUlrQixHQUFPL0UsS0FBS2dGLE1BQU1oRixLQUFLOEQsVUFBWSxFQUN4QjlELEtBQUs4RCxRQUNMOUQsS0FBS2lGLFNBR3BCakYsTUFBS2tELFNBQXFDLGFBQXpCbEQsS0FBS1MsUUFBUSxRQUM5QlQsS0FBS21ELFdBQVksQ0FFakIsSUFBSStCLElBQVNDLEtBQVEsRUFBR0MsSUFBTyxFQWlCL0IsT0FmSUwsR0FBSzlGLE9BQVMsSUFDZGUsS0FBS3FGLFNBQVNOLEdBQ2QvRSxLQUFLb0QsT0FBT2pFLEtBQUssMEJBQTBCbUcsU0FHM0N0RixLQUFLNkQsT0FBUyxLQUVkN0QsS0FBS21ELFVBQVluRCxLQUFLa0UsY0FBY2pGLFFBQVVlLEtBQUt1RCxRQUFRdEUsT0FDM0RlLEtBQUtrRCxTQUFZbEQsS0FBS2tELFdBQWFsRCxLQUFLbUQsVUFFeEMrQixFQUFNbEYsS0FBSytDLElBQU0vQyxLQUFLdUYsVUFBVVIsR0FBUSxNQUc1Qy9FLEtBQUt3RixLQUFLTixHQUVIbEYsTUFFWG9ELEtBQU0sV0FDRixHQUFtQixPQUFmcEQsS0FBSzRELE1BQWdCLENBQ3JCLEdBQUk2QixHQUFTekYsS0FBS1MsUUFBUSxPQUMxQlQsTUFBSzRELE1BQVF4RixFQUFFOEQsV0FBV3VELEdBQVVBLEVBQU8xRCxLQUFLL0IsTUFBUUEsS0FBS1IsU0FBU0wsS0FBS3NHLEdBRy9FLE1BQU96RixNQUFLNEQsT0FFaEJMLE1BQU8sV0FDSCxHQUFvQixPQUFoQnZELEtBQUs2RCxPQUFpQixDQUN0QixHQUFJNEIsR0FBU3pGLEtBQUtTLFFBQVEsUUFDMUJULE1BQUs2RCxRQUFVekYsRUFBRThELFdBQVd1RCxHQUFVQSxFQUFPMUQsS0FBSy9CLE1BQVFBLEtBQUtvRCxPQUFPakUsS0FBS3NHLElBQVNDLElBQUksMEJBRzVGLE1BQU8xRixNQUFLNkQsUUFFaEJtQixNQUFPLFNBQVNELEdBQ1osTUFBTy9FLE1BQUt1RCxRQUFReUIsTUFBTUQsSUFFOUJFLFFBQVMsV0FDTCxHQUtJUCxHQUxBUCxFQUFVbkUsS0FDVjJGLEVBQVUzRixLQUFLb0QsT0FBT3dDLFdBQVc1RixLQUFLK0MsSUFDdENrQyxFQUFVN0csSUFDVnlILEdBQVUsRUFDVkMsRUFBVTlGLEtBQUtnRCxTQUFXLFNBQVloRCxLQUFLaUQsTUFBUWpELEtBQUt0QixTQUFXLE9BQVMsT0E4QmhGLE9BM0JJc0IsTUFBS2lELEtBQU9qRCxLQUFLdEIsV0FBYXNCLEtBQUtnRCxXQUNuQzJDLEdBQU8zRixLQUFLb0QsT0FBT3NCLFFBQVUxRSxLQUFLK0YsWUFHdEMvRixLQUFLdUQsUUFBUXBDLEtBQUssV0FHZCxHQUZBOEQsRUFBVTdHLEVBQUU0QixNQUVSNkYsRUFDQSxPQUFPLENBR1gsSUFBSUcsR0FBTTdCLEVBQUs4QixVQUFVaEIsRUFJekIsSUFGQVUsR0FBT0ssRUFFSEwsR0FBTyxFQUFHLENBR1YsR0FGQWpCLEVBQVFzQixFQUFNeEQsRUFBUXlDLEVBQVFILElBQUksVUFBWWdCLE1BRXpDSSxLQUFLQyxJQUFJUixHQUFPSyxFQUFPdEIsRUFBUSxHQUFPLEdBR3ZDLE9BQU8sQ0FGUG1CLElBQU8sS0FRWlosR0FFWHhHLE9BQVEsV0FDSixNQUFPdUIsTUFBSzhELFNBRWhCc0MsTUFBTyxXQUNILE1BQU9wRyxNQUFLK0QsUUFFaEJzQyxLQUFNLFdBQ0YsTUFBT3JHLE1BQUtnRSxPQUVoQnNDLFFBQVMsV0FDTCxNQUFPdEcsTUFBS2lFLFVBRWhCc0MsYUFBYyxXQUNWLE1BQU92RyxNQUFLa0UsZUFFaEJzQyxRQUFTLFdBQ0wsSUFBSSxJQUFVeEcsS0FBS0ksU0FBUyxXQUN4QixPQUFPLENBR1gsSUFBSXNELEdBQU8xRCxLQUFLUyxRQUFRLFFBQ3BCZ0csRUFBTXpHLEtBQUt1RCxRQUFRdEUsT0FBUyxFQUM1QnlILEVBQVExRyxLQUFLUyxRQUFRLFVBQVlULEtBQUs4RCxRQUFVOUQsS0FBS2dFLEtBRXpELFVBQU95QyxHQUFPLElBQU16RyxLQUFLbUQsWUFDbkJPLEdBQWlCLFVBQVRBLEdBQ0wxRCxLQUFLZ0YsTUFBTTBCLEdBQVNELEdBQ3BCekcsS0FBSzRDLE9BQVM1QyxLQUFLNkMsVUFFaEM4RCxRQUFTLFdBQ0wsSUFBSSxJQUFVM0csS0FBS0ksU0FBUyxXQUN4QixPQUFPLENBR1gsSUFBSXNELEdBQU8xRCxLQUFLUyxRQUFRLE9BRXhCLFVBQU9ULEtBQUt1RCxRQUFRdEUsT0FBUyxJQUFNZSxLQUFLbUQsWUFDbENPLEdBQWlCLFNBQVRBLEdBQ0wxRCxLQUFLZ0YsTUFBTWhGLEtBQUsrRCxRQUFVLEdBQzFCL0QsS0FBSzRDLE1BQVE1QyxLQUFLNkMsVUFFL0JrRCxTQUFVLFdBQ04sTUFBTy9GLE1BQUtSLFNBQVMsU0FBV1EsS0FBS2dELFNBQVcsU0FBVyxhQUUvRGlELFVBQVcsU0FBU2xILEdBQ2hCLE1BQU9BLEdBQVEsU0FBV2lCLEtBQUtnRCxTQUFXLFNBQVcsV0FBVSxJQUVuRTRELE9BQVEsU0FBU25JLEVBQVFvSSxFQUFTQyxHQUM5QixHQUFJOUcsS0FBSzJDLFVBQ0wsTUFBTzNDLEtBR1gsS0FBSSxJQUFVQSxLQUFLSSxTQUFTLFNBQVUsTUFBTzNCLEVBQVFvSSxJQUNqRCxNQUFPN0csS0FHUDVCLEdBQUU4RCxXQUFXMkUsS0FDYkMsRUFBV0QsRUFDWEEsR0FBVyxFQUdmLElBQUlFLEdBQVMzSSxFQUFFQyxVQUFVRyxZQUFZQyxFQUVyQyxJQUFJc0ksRUFBT3JJLFNBQVUsQ0FDakIsR0FHSXNJLEdBQ0FaLEVBQ0FwQixFQUNBaUMsRUFDQUMsRUFDQUMsRUFDQWpDLEVBQ0FrQyxFQVZBWCxFQUFTekcsS0FBS3VELFFBQVF0RSxPQUFTLEVBQy9CMkgsRUFBU1YsS0FBS0MsSUFBSVksRUFBT3RJLFFBQ3pCaUYsRUFBUzFELEtBQUtTLFFBQVEsT0FVMUIsSUFBSXNHLEVBQU90SSxPQUFTLEVBQUcsQ0FDbkIsR0FBSTRILEdBQU9yRyxLQUFLZ0YsTUFBTWhGLEtBQUtnRSxNQUUzQixJQUFJcUMsR0FBUUksR0FBT3pHLEtBQUs0QyxLQUNmNUMsS0FBSzZDLE9BR08sU0FBVGEsR0FBNEIsU0FBVEEsRUFDbkIxRCxLQUFLcUgsUUFBUSxFQUFHUixFQUFTQyxHQUVyQjFJLEVBQUU4RCxXQUFXNEUsSUFDYkEsRUFBUy9FLEtBQUsvQixNQUFNLEdBTjVCQSxLQUFLc0gsWUFBWVQsRUFBU0MsT0FhOUIsSUFGQUUsRUFBVWhILEtBQUtnRixNQUFNaEYsS0FBSzhELFNBRXJCOUQsS0FBS21ELFdBQWE2RCxJQUFZUCxJQUFpQixhQUFUL0MsR0FBZ0MsU0FBVEEsR0FBNEIsU0FBVEEsS0FDL0UxRCxLQUFLbUQsV0FBYWtELElBQVNJLElBQWlCLFNBQVQvQyxHQUE0QixTQUFUQSxHQUN4RDFELEtBQUtxSCxRQUFRLEVBQUdSLEVBQVNDLE9BSXpCLElBRkE5QixFQUFRZ0MsRUFBVUosRUFFZDVHLEtBQUtrRCxVQUFZOEIsRUFBUXlCLEVBQUssQ0FJOUIsSUFIQVcsRUFBSVgsRUFDSlMsRUFBT2xILEtBQUt1RCxRQUFRZ0UsSUFBSSxJQUVqQkgsSUFBTXBDLEdBQ1RrQyxFQUFPbEgsS0FBS3VELFFBQVFELEdBQUcsR0FDdkI2RCxFQUFZbkgsS0FBS2lFLFNBQVNlLE1BQU1rQyxJQUFTLEVBRXJDQyxHQUNBRCxFQUFLTSxNQUFNTixFQUFLTyxPQUFNLEdBQU14SCxLQUFLLHdCQUF3QixJQUc3REQsS0FBS29ELE9BQU9zRSxPQUFPUixHQUVkQyxJQUNEakMsS0FDQUEsRUFBTWxGLEtBQUsrQyxJQUFNL0MsS0FBS2lHLFVBQVVpQixHQUNoQ2xILEtBQUsySCxPQUFPekMsSUFJaEJsRixLQUFLNkQsT0FBUyxJQUdsQjdELE1BQUtxSCxRQUFRSCxFQUFNTCxFQUFTQyxPQUU1QjlHLE1BQUtxSCxRQUFRbkIsS0FBSzBCLElBQUk1QyxFQUFPeUIsR0FBTUksRUFBU0MsT0FLeEQsSUFBSTlHLEtBQUs2QyxPQUNMN0MsS0FBS3FILFFBQVFuQixLQUFLMkIsSUFBSzdILEtBQUtnRixNQUFNaEYsS0FBSytELFFBQVU2QyxFQUFVLEVBQUcsR0FBSUMsRUFBU0MsT0FPM0UsSUFMQVYsRUFBU3BHLEtBQUtnRixNQUFNaEYsS0FBSytELFFBQ3pCaUQsRUFBVWhILEtBQUtnRixNQUFNaEYsS0FBSzhELFNBQzFCbUQsRUFBU2pILEtBQUttRCxVQUFZNkQsRUFBVVosRUFDcENwQixFQUFTaUMsRUFBUUwsRUFFSixHQUFUSyxJQUFnQmpILEtBQUttRCxXQUFzQixhQUFUTyxHQUFpQyxTQUFUQSxHQUE0QixVQUFUQSxHQUM3RTFELEtBQUtxSCxRQUFRWixFQUFLSSxFQUFTQyxPQUUzQixJQUFJOUcsS0FBS2tELFVBQW9CLEVBQVI4QixFQUFXLENBSTVCLElBSEFvQyxFQUFPcEMsRUFDUGtDLEVBQU9sSCxLQUFLdUQsUUFBUWdFLElBQUksR0FFakJILElBQU0sR0FBRyxDQUNaRixFQUFPbEgsS0FBS3VELFFBQVFELEdBQUcsSUFDdkI2RCxFQUFZbkgsS0FBS2lFLFNBQVNlLE1BQU1rQyxJQUFTLEVBRXJDQyxHQUNBRCxFQUFLTSxNQUFNTixFQUFLTyxPQUFNLEdBQU14SCxLQUFLLHdCQUF3QixJQUc3REQsS0FBS29ELE9BQU8wRSxRQUFRWixHQUdwQmxILEtBQUs2RCxPQUFTLElBRWQsSUFBSW1DLEdBQU1oRyxLQUFLaUcsVUFBVWlCLEVBRXpCaEMsTUFDQUEsRUFBTWxGLEtBQUsrQyxLQUFPaUQsRUFDbEJoRyxLQUFLMkgsT0FBT3pDLEdBSWhCbEYsS0FBS3FILFFBQVFILEVBQU1MLEVBQVNDLE9BRTVCOUcsTUFBS3FILFFBQVFuQixLQUFLMkIsSUFBSTdDLEVBQU8sR0FBSTZCLEVBQVNDLE9BTTFEOUcsTUFBS3FILFFBQVFOLEVBQU90SSxPQUFRb0ksRUFBU0MsRUFLekMsT0FGQTlHLE1BQUtJLFNBQVMsYUFFUEosTUFFWDJILE9BQVEsU0FBU0ksRUFBWUMsR0FDekIsR0FBSXBDLEdBQVc1RixLQUFLb0QsT0FBT3dDLFdBQ3ZCcUMsRUFBYSxFQUNiQyxFQUFhLENBa0JqQixPQWhCSWxJLE1BQUtpRCxNQUFRakQsS0FBS2dELFdBQ2xCaUYsRUFBYSxHQUVUakksS0FBS3RCLFdBQ0x3SixFQUFhbEksS0FBS29ELE9BQU9zQixRQUFVMUUsS0FBSytGLGFBSTVDZ0MsRUFBVzVDLE9BQ1g0QyxFQUFXNUMsS0FBUVMsRUFBU1QsS0FBTytDLEVBQWExRixFQUFRdUYsRUFBVzVDLE1BQVE4QyxFQUFjLE1BR3pGRixFQUFXM0MsTUFDWDJDLEVBQVczQyxJQUFPUSxFQUFTUixJQUFNOEMsRUFBYTFGLEVBQVF1RixFQUFXM0MsS0FBTzZDLEVBQWMsTUFHbkZqSSxLQUFLd0YsS0FBS3VDLEVBQVlDLElBRWpDeEMsS0FBTSxTQUFTdUMsRUFBWUMsR0FDdkJBLEVBQU9BLEtBRVAsSUFBSXZDLEdBQWV6RixLQUFLUyxRQUFRLGVBQzVCZ0QsSUFBaUJnQyxFQUNqQjBDLElBQWlCMUMsRUFBTzBDLFdBQ3hCQyxJQUFpQjNDLEVBQU8yQyxhQUN4QkMsRUFBZUwsRUFBS0ssVUFBWSxFQUNoQ2pGLEVBQWVwRCxLQUFLb0QsTUFFeEIsS0FBS0ssR0FBZTRFLEVBQVcsRUFFM0IsV0FEQWpGLEdBQUt5RCxRQUFRa0IsRUFBWUMsRUFJN0IsSUFBSU0sR0FBV04sRUFBS00sVUFBWWxLLEVBQUV1QixLQUM5Qm1GLElBRUosSUFBSXJCLEVBQWEsQ0FDYixHQUFJOEUsSUFDSUMsbUJBQW9CcEYsRUFBSzBCLElBQUksc0JBQzdCMkQseUJBQTBCckYsRUFBSzBCLElBQUksNEJBQ25DNEQsbUJBQW9CdEYsRUFBSzBCLElBQUksdUJBRWpDNkQsRUFBY0wsQ0FFbEJBLEdBQVcsV0FDUGxLLEVBQUU0QixNQUFNOEUsSUFBSXlELEdBQ1pJLEVBQVk1RyxLQUFLL0IsT0FFckI4RSxHQUNJMEQsb0JBQXFCSCxFQUFXLEVBQUlBLEVBQVcsSUFBTyxHQUFLLElBQzNESSx5QkFBMEJoRCxFQUFPbUQsUUFBVVosRUFBS1ksT0FDaERGLG1CQUFvQkwsRUFBVyxFQUFJLFdBQy9CLE1BQUlGLElBQWNDLEVBR1AsTUFHSkwsRUFBVzVDLEtBQU8sT0FBUyxTQUMvQixPQUNQMEQsVUFBVyxRQUlmVCxFQUNBdEQsRUFBSStELFVBQVksZ0JBQWtCZCxFQUFXNUMsTUFBUSxHQUFLLEtBQU80QyxFQUFXM0MsS0FBTyxHQUFLLE1BQ2pGK0MsRUFDUHJELEVBQUkrRCxVQUFZLGNBQWdCZCxFQUFXNUMsTUFBUSxHQUFLLEtBQU80QyxFQUFXM0MsS0FBTyxHQUFLLElBRXRGaEgsRUFBRXlDLE9BQU9pRSxFQUFLaUQsR0FHZHRFLEdBQWU0RSxFQUFXLEdBQzFCakYsRUFBSzBGLElBQUksa0ZBQW1GUixHQUdoR2xGLEVBQUswQixJQUFJQSxHQUVPLEdBQVp1RCxHQUNBakYsRUFBS2pDLEtBQUssV0FDTm1ILEVBQVN2RyxLQUFLL0IsU0FJMUJxSCxRQUFTLFNBQVN0QyxFQUFNOEIsRUFBU0MsR0FDN0IsR0FBSTlHLEtBQUsyQyxVQUtMLE1BSkl2RSxHQUFFOEQsV0FBVzRFLElBQ2JBLEVBQVMvRSxLQUFLL0IsTUFBTSxHQUdqQkEsSUFTWCxJQU5vQixnQkFBVCtFLEdBQ1BBLEVBQU8vRSxLQUFLdUQsUUFBUUQsR0FBR3lCLEdBQ08sbUJBQWhCQSxHQUFLZ0UsU0FDbkJoRSxFQUFPM0csRUFBRTJHLElBR08sSUFBaEJBLEVBQUs5RixPQUtMLE1BSkliLEdBQUU4RCxXQUFXNEUsSUFDYkEsRUFBUy9FLEtBQUsvQixNQUFNLEdBR2pCQSxJQUdYQSxNQUFLNkMsUUFBUyxFQUVkN0MsS0FBS3FGLFNBQVNOLEVBRWQsSUFBSVksR0FBVTNGLEtBQUt1RixVQUFVUixHQUN6QmlFLEVBQVVoSixLQUFLb0QsT0FBT3dDLFdBQVc1RixLQUFLK0MsR0FFMUMsSUFBSTRDLElBQVFxRCxFQUtSLE1BSkk1SyxHQUFFOEQsV0FBVzRFLElBQ2JBLEVBQVMvRSxLQUFLL0IsTUFBTSxHQUdqQkEsSUFHWCxJQUFJK0gsS0FLSixPQUpBQSxHQUFXL0gsS0FBSytDLElBQU00QyxFQUFNLEtBRTVCM0YsS0FBS2lKLFNBQVNsQixFQUFZbEIsRUFBU0MsR0FFNUI5RyxNQUVYc0gsWUFBYSxTQUFTVCxFQUFTQyxHQUMzQixHQUFJOUcsS0FBSzJDLFlBQWMzQyxLQUFLNEMsS0FLeEIsTUFKSXhFLEdBQUU4RCxXQUFXNEUsSUFDYkEsRUFBUy9FLEtBQUsvQixNQUFNLEdBR2pCQSxJQUdYLElBQUkyRixHQUFNM0YsS0FBS29ELE9BQU93QyxXQUFXNUYsS0FBSytDLEdBRWxDL0MsTUFBS2lELEtBQU9qRCxLQUFLdEIsV0FBYXNCLEtBQUtnRCxXQUNuQzJDLEdBQU8zRixLQUFLb0QsT0FBT3NCLFFBQVUxRSxLQUFLK0YsWUFHbEMvRixLQUFLaUQsTUFBUWpELEtBQUtnRCxTQUNsQjJDLEdBQU8zRixLQUFLNEMsS0FFWitDLEdBQU8zRixLQUFLNEMsS0FHaEI1QyxLQUFLNkMsUUFBUyxDQUVkLElBQUlrRixLQVVKLE9BVEFBLEdBQVcvSCxLQUFLK0MsSUFBTTRDLEVBQU0sS0FFNUIzRixLQUFLa0osU0FDRHpLLE9BQWN1QixLQUFLOEQsUUFBUXFGLE9BQzNCNUMsYUFBY3ZHLEtBQUtrRSxjQUFjcEMsTUFBTSxHQUFHc0gsSUFBSXBKLEtBQUtpRSxTQUFTb0MsVUFHaEVyRyxLQUFLaUosU0FBU2xCLEVBQVlsQixFQUFTQyxHQUU1QjlHLE1BRVhpSixTQUFVLFNBQVNsQixFQUFZbEIsRUFBU0MsR0FHcEMsR0FGQUEsRUFBV0EsR0FBWTFJLEVBQUV1QixNQUVyQixJQUFVSyxLQUFLSSxTQUFTLFdBRXhCLE1BREEwRyxHQUFTL0UsS0FBSy9CLE1BQU0sR0FDYkEsSUFHWEEsTUFBSzJDLFdBQVksQ0FFakIsSUFBSWEsR0FBWXhELEtBQUtTLFFBQVEsYUFDekI2SCxFQUFZbEssRUFBRWlMLE1BQU0sV0FDaEJySixLQUFLMkMsV0FBWSxDQUVqQixJQUFJMkcsR0FBSXRKLEtBQUtvRCxPQUFPakUsS0FBSyx5QkFFckJtSyxHQUFFckssT0FBUyxJQUNYcUssRUFBRWhFLFNBQ0Z0RixLQUFLRixXQUdURSxLQUFLSSxTQUFTLGNBRWQwRyxFQUFTL0UsS0FBSy9CLE1BQU0sSUFDckJBLE1BRUhnSSxFQUE0QixnQkFBZHhFLEdBQ0hwRixFQUFFeUMsVUFBVzJDLElBQ1o2RSxTQUFVN0UsR0FDdEJtRixFQUFjWCxFQUFLTSxVQUFZbEssRUFBRXVCLElBZXJDLE9BYklrSCxNQUFZLEVBQ1ptQixFQUFLSyxTQUFXLEVBQzZCLG1CQUEvQmpLLEdBQUVtTCxHQUFHQyxPQUFPeEIsRUFBS0ssWUFDL0JMLEVBQUtLLFNBQVdqSyxFQUFFbUwsR0FBR0MsT0FBT3hCLEVBQUtLLFdBR3JDTCxFQUFLTSxTQUFXLFdBQ1pBLElBQ0FLLEVBQVk1RyxLQUFLL0IsT0FHckJBLEtBQUt3RixLQUFLdUMsRUFBWUMsR0FFZmhJLE1BRVhxRixTQUFVLFNBQVNOLEdBQ2YsR0FhSW1DLEdBQ0FDLEVBQ0FzQyxFQUNBekQsRUFoQkFoQixFQUFTaEYsS0FBS2dGLE1BQU1ELEdBQ3BCMkUsRUFBUzFFLEVBQ1QyRSxFQUFTM0osS0FBS2lHLFVBQVVsQixHQUN4QjZFLEVBQVM1SixLQUFLK0YsV0FDZEQsRUFBUzlGLEtBQUtnRCxTQUFXLFNBQVloRCxLQUFLaUQsSUFBTSxPQUFVLFFBQzFEVSxFQUFTM0QsS0FBS1MsUUFBUSxVQUN0Qm9KLEdBQ0lwTCxPQUFjc0csRUFDZHFCLE1BQWNyQixFQUNkc0IsS0FBY3RCLEVBQ2R1QixRQUFjdkIsRUFDZHdCLGFBQW9CcUQsR0FBTkQsRUFBYTVFLEVBQU8zRyxJQVkxQyxJQUxJdUYsSUFDQWdHLEdBQU0sRUFDTkMsR0FBUSxHQUdIQSxFQUFMRCxFQUNBLE9BQWEsQ0FHVCxHQUZBekMsRUFBT2xILEtBQUt1RCxRQUFRRCxLQUFLb0csR0FFTCxJQUFoQnhDLEVBQUtqSSxPQUFjLENBQ25CLElBQUtlLEtBQUtrRCxTQUNOLEtBS0osSUFGQWdFLEVBQU9sSCxLQUFLdUQsUUFBUUQsR0FBRyxHQUVuQnlCLEVBQUt3QyxJQUFJLEtBQU9MLEVBQUtLLElBQUksR0FDekIsS0FXSixJQVJBSixFQUFZbkgsS0FBS2lFLFNBQVNlLE1BQU1rQyxJQUFTLEVBRXJDQyxHQUNBRCxFQUFLTSxNQUFNTixFQUFLTyxPQUFNLEdBQU14SCxLQUFLLHdCQUF3QixJQUc3REQsS0FBS29ELE9BQU9zRSxPQUFPUixJQUVkQyxFQUFXLENBQ1osR0FBSWpDLEtBQ0pBLEdBQU1sRixLQUFLK0MsSUFBTS9DLEtBQUtpRyxVQUFVaUIsR0FDaENsSCxLQUFLMkgsT0FBT3pDLEdBSWhCbEYsS0FBSzZELE9BQVMsS0FLbEIsR0FGQW1DLEVBQU1oRyxLQUFLaUcsVUFBVWlCLEdBRVQsSUFBUmxCLEVBQ0EsS0FlSixJQVpBMkQsR0FBTTNELEVBRU42RCxFQUFPeEQsS0FBVWEsRUFDakIyQyxFQUFPdkQsUUFBVXVELEVBQU92RCxRQUFROEMsSUFBSWxDLEdBR3BDdUMsRUFBU2pILEVBQVEwRSxFQUFLcEMsSUFBSSxVQUFZZ0IsSUFFakI4RCxHQUFoQkQsRUFBS0YsSUFDTkksRUFBT3RELGFBQWVzRCxFQUFPdEQsYUFBYTZDLElBQUlsQyxJQUc5Q3lDLEdBQU1DLEVBQ04sTUFLWixJQUFLNUosS0FBS2tELFdBQWFTLEdBQWVpRyxFQUFMRCxFQUc3QixJQUZBRCxFQUFNMUUsSUFFTyxDQUNULEtBQU0wRSxFQUFNLEVBQ1IsS0FLSixJQUZBeEMsRUFBT2xILEtBQUt1RCxRQUFRRCxHQUFHb0csR0FFSCxJQUFoQnhDLEVBQUtqSSxPQUNMLEtBS0osSUFGQStHLEVBQU1oRyxLQUFLaUcsVUFBVWlCLEdBRVQsSUFBUmxCLEVBQ0EsS0FlSixJQVpBMkQsR0FBTTNELEVBRU42RCxFQUFPekQsTUFBVWMsRUFDakIyQyxFQUFPdkQsUUFBVXVELEVBQU92RCxRQUFROEMsSUFBSWxDLEdBR3BDdUMsRUFBU2pILEVBQVEwRSxFQUFLcEMsSUFBSSxVQUFZZ0IsSUFFakI4RCxHQUFoQkQsRUFBS0YsSUFDTkksRUFBT3RELGFBQWVzRCxFQUFPdEQsYUFBYTZDLElBQUlsQyxJQUc5Q3lDLEdBQU1DLEVBQ04sTUFzQlosTUFqQkE1SixNQUFLa0osUUFBUVcsR0FFYjdKLEtBQUs0QyxLQUFPLEVBRVBlLEdBQ3dCLGFBQXpCM0QsS0FBS1MsUUFBUSxTQUNZLFdBQXpCVCxLQUFLUyxRQUFRLFNBQ2JULEtBQUtnRixNQUFNNkUsRUFBT3hELFFBQVdyRyxLQUFLdUQsUUFBUXRFLE9BQVMsSUFHbkQwSyxHQUFNbkgsRUFBUXFILEVBQU94RCxLQUFLdkIsSUFBSSxVQUFZZ0IsSUFFdEM2RCxFQUFLQyxJQUNMNUosS0FBSzRDLEtBQU8rRyxFQUFLQyxJQUlsQjVKLE1BRVh1RixVQUFXLFNBQVNSLEdBQ2hCLEdBQUlxQixHQUFTcEcsS0FBSytELE9BQ2Q0QixFQUFTUyxFQUFNUixXQUFXNUYsS0FBSytDLElBQy9CWSxFQUFTM0QsS0FBS1MsUUFBUSxVQUN0QnFKLEVBQWVuRyxFQUFVM0QsS0FBSytGLFdBQWEsRUFBTS9GLEtBQUtpRyxVQUFVRyxHQUFTLEVBQUssQ0F1QmxGLE9BckJJcEcsTUFBS2lELE1BQVFqRCxLQUFLZ0QsVUFFZDJDLEdBREEzRixLQUFLdEIsU0FDRXNCLEtBQUtvRCxPQUFPc0IsUUFBVTFFLEtBQUtpRyxVQUFVRyxHQUVyQ3BHLEtBQUsrRixXQUFhL0YsS0FBS2lHLFVBQVVHLEdBRzVDVCxHQUFPbUUsR0FFUG5FLEdBQU9tRSxHQUdObkcsSUFDQTNELEtBQUtnRixNQUFNRCxHQUFRL0UsS0FBS2dGLE1BQU1vQixJQUFVcEcsS0FBSzZDLFNBQzlDN0MsS0FBSzRDLE1BQ0wrQyxFQUFNM0YsS0FBS2lELE1BQVFqRCxLQUFLZ0QsU0FBVzJDLEVBQU0zRixLQUFLNEMsS0FBTytDLEVBQU0zRixLQUFLNEMsS0FDaEU1QyxLQUFLNkMsUUFBUyxHQUVkN0MsS0FBSzZDLFFBQVMsR0FHVjhDLEdBRVp1RCxRQUFTLFNBQVNXLEdBQ2QsR0FTSW5KLEdBVEF5RCxFQUFPbkUsS0FDUGdILEdBQ0l2SSxPQUFjdUIsS0FBSzhELFFBQ25Cc0MsTUFBY3BHLEtBQUsrRCxPQUNuQnNDLEtBQWNyRyxLQUFLZ0UsTUFDbkJzQyxRQUFjdEcsS0FBS2lFLFNBQ25Cc0MsYUFBY3ZHLEtBQUtrRSxlQUV2QjZGLEVBQU8vSixLQUFLZ0YsTUFBTTZFLEVBQU96RCxPQUFTWSxFQUFRWixPQUFTcEcsS0FBS2dGLE1BQU1nQyxFQUFRWixPQUV0RTRELEVBQVcsU0FBU3RKLEdBQ2hCLEdBQUl1SixNQUNBQyxJQUVKTCxHQUFPbkosR0FBS1MsS0FBSyxXQUNUNkYsRUFBUXRHLEdBQUtzRSxNQUFNaEYsTUFBUSxHQUMzQmlLLEVBQUtFLEtBQUtuSyxRQUlsQmdILEVBQVF0RyxHQUFLUyxLQUFLLFdBQ1YwSSxFQUFPbkosR0FBS3NFLE1BQU1oRixNQUFRLEdBQzFCa0ssRUFBTUMsS0FBS25LLFFBSWYrSixFQUNBRSxFQUFPQSxFQUFLRyxVQUVaRixFQUFRQSxFQUFNRSxVQUdsQmpHLEVBQUsvRCxTQUFTTSxFQUFNLEtBQU10QyxFQUFFNkwsSUFDNUI5RixFQUFLL0QsU0FBU00sRUFBTSxNQUFPdEMsRUFBRThMLElBRTdCL0YsRUFBSyxJQUFNekQsR0FBT21KLEVBQU9uSixHQUdqQyxLQUFLQSxJQUFPbUosR0FDUkcsRUFBU3RKLEVBR2IsT0FBT1YsVUFHakJzQyxPQUFRQyxRQUVULFNBQVNuRSxHQUNOLFlBRUFBLEdBQUVpTSxVQUFVM0ksR0FBRzRJLGVBQWlCLFNBQVM3TCxFQUFRb0ksRUFBU0MsR0FDdEQsR0FHSTlCLEdBSEErQixFQUFTM0ksRUFBRUMsVUFBVUcsWUFBWUMsR0FDakMySCxFQUFTcEcsS0FBS2dGLE1BQU1oRixLQUFLa0UsY0FBY2tDLFNBQ3ZDQyxFQUFTckcsS0FBS2dGLE1BQU1oRixLQUFLa0UsY0FBY21DLE9BUzNDLElBTElyQixFQURBK0IsRUFBT3JJLFNBQ0NxSSxFQUFPdEksT0FBUyxFQUFJeUgsS0FBSzJCLElBQUksRUFBR3pCLEVBQVFXLEVBQU90SSxRQUFVNEgsRUFBT1UsRUFBT3RJLE9BRTlDLGdCQUFsQnNJLEdBQU90SSxPQUFzQnNJLEVBQU90SSxPQUFTdUIsS0FBS2dGLE1BQU0rQixFQUFPdEksUUFHdEUySCxFQUFScEIsRUFDQSxNQUFPaEYsTUFBSzRHLE9BQU81QixFQUFPNkIsRUFBU0MsRUFHdkMsSUFBSTlCLEdBQVNvQixHQUFrQkMsR0FBVHJCLEVBS2xCLE1BSkk1RyxHQUFFOEQsV0FBVzRFLElBQ2JBLEVBQVMvRSxLQUFLL0IsTUFBTSxHQUdqQkEsSUFTWCxLQU5BLEdBSUlrSCxHQUpBM0QsRUFBUXZELEtBQUt1RCxRQUNicUcsRUFBTzVKLEtBQUsrRixXQUNaRCxFQUFPOUYsS0FBS2dELFNBQVcsU0FBWWhELEtBQUtpRCxJQUFNLE9BQVUsUUFDeEQwRyxFQUFPLElBR0UsQ0FHVCxHQUZBekMsRUFBTzNELEVBQU1ELEdBQUcwQixHQUVJLElBQWhCa0MsRUFBS2pJLE9BQ0wsS0FLSixJQUZBMEssR0FBTTNKLEtBQUtpRyxVQUFVaUIsR0FFakJ5QyxHQUFNQyxFQUFNLENBQ1osR0FBSUgsR0FBUy9HLFdBQVd3RSxFQUFLcEMsSUFBSSxVQUFZZ0IsS0FBUyxDQUNqRDZELEdBQUtGLElBQVlHLEdBQ2xCNUUsR0FFSixPQUdKLEdBQWEsR0FBVEEsRUFDQSxLQUdKQSxLQUdKLE1BQU9oRixNQUFLNEcsT0FBTzVCLEVBQU82QixFQUFTQyxLQUV6Q3hFLFFBRUQsU0FBU2xFLEdBQ04sWUFFQUEsR0FBRUMsVUFBVWtELE9BQU8sb0JBQ2ZoQyxVQUNJZCxPQUFRLE1BQ1J1QyxNQUFRLFFBQ1J1SixPQUFRLFVBRVpDLFFBQVMsS0FDVDlLLE1BQU8sV0FDSE0sS0FBS3lLLFVBQVlyTSxFQUFFaUwsTUFBTSxXQUNyQnJKLEtBQUtILFdBQ0xHLEtBQUtoQixXQUNBOEosSUFBSSxzQkFBdUIxSyxFQUFFaUwsTUFBTXJKLEtBQUtKLFFBQVNJLFFBQ3ZEQSxNQUNIQSxLQUFLMEssU0FBV3RNLEVBQUVpTCxNQUFNckosS0FBS0YsUUFBU0UsTUFDdENBLEtBQUsySyxRQUFVdk0sRUFBRWlMLE1BQU0sU0FBU3VCLEdBQzVCQSxFQUFFQyxnQkFFRixJQUFJTixHQUFTdkssS0FBS1MsUUFBUSxTQUV0QnJDLEdBQUU4RCxXQUFXcUksR0FDYkEsRUFBT3hJLEtBQUsvQixNQUVaQSxLQUFLaEIsV0FDQXFMLFVBQVVySyxLQUFLUyxRQUFRLFVBQVdULEtBQUtTLFFBQVEsWUFFekRULE9BRVBKLFFBQVMsV0FDTEksS0FBS2hCLFdBQ0E4SixJQUFJLG9CQUFxQjlJLEtBQUt5SyxXQUM5QmxHLEdBQUcsMENBQTJDdkUsS0FBSzBLLFVBRXhEMUssS0FBS1IsU0FDQStFLEdBQUd2RSxLQUFLUyxRQUFRLFNBQVcsb0JBQXFCVCxLQUFLMkssU0FFMUQzSyxLQUFLRixXQUVURCxTQUFVLFdBQ05HLEtBQUtSLFNBQ0FnRixJQUFJLG9CQUFxQnhFLEtBQUsySyxTQUVuQzNLLEtBQUtoQixXQUNBd0YsSUFBSSxvQkFBcUJ4RSxLQUFLeUssV0FDOUJqRyxJQUFJLDBDQUEyQ3hFLEtBQUswSyxXQUU3RDVLLFFBQVMsV0FDTCxHQUVJZ0wsR0FGQS9ELEVBQVczSSxFQUFFQyxVQUFVRyxZQUFZd0IsS0FBS1MsUUFBUSxXQUNoRHpCLEVBQVdnQixLQUFLaEIsVUFHcEIsSUFBSStILEVBQU9ySSxTQUNQb00sRUFBUzlMLEVBQ0pxTCxVQUFVdEQsRUFBT3RJLE9BQVMsRUFBSSxVQUFZLGVBQzVDLENBQ0gsR0FBSUEsR0FBa0MsZ0JBQWxCc0ksR0FBT3RJLE9BQ1hPLEVBQVNxTCxVQUFVLFNBQVMvRyxHQUFHeUQsRUFBT3RJLFFBQ3RDc0ksRUFBT3RJLE1BRXZCcU0sR0FBUzlMLEVBQVNxTCxVQUFVLFVBQVVyRixNQUFNdkcsSUFBVyxFQVEzRCxNQUxJdUIsTUFBS3dLLFVBQVlNLElBQ2pCOUssS0FBS0ksU0FBUzBLLEVBQVMsU0FBVyxZQUNsQzlLLEtBQUt3SyxRQUFVTSxHQUdaOUssU0FHakJzQyxRQUVELFNBQVNsRSxHQUNOLFlBRUFBLEdBQUVDLFVBQVVrRCxPQUFPLHVCQUNmaEMsVUFDSXdMLFFBQVMsS0FDVGhHLEtBQU0sU0FBU2lHLEdBQ1gsTUFBTyxhQUFlQSxFQUFPLEtBQU9BLEVBQU8sUUFFL0NoSyxNQUFRLFFBQ1J1SixPQUFRLFVBRVpVLGVBQWdCLEtBQ2hCQyxVQUNBckgsVUFDQXNILGFBQWMsS0FDZHpMLE1BQU8sV0FDSE0sS0FBS3lLLFVBQVlyTSxFQUFFaUwsTUFBTSxXQUNyQnJKLEtBQUtILFdBQ0xHLEtBQUtoQixXQUNBOEosSUFBSSxzQkFBdUIxSyxFQUFFaUwsTUFBTXJKLEtBQUtKLFFBQVNJLFFBQ3ZEQSxNQUNIQSxLQUFLMEssU0FBV3RNLEVBQUVpTCxNQUFNckosS0FBS0YsUUFBU0UsTUFDdENBLEtBQUtvTCxTQUFXaE4sRUFBRWlMLE1BQU1ySixLQUFLa0osUUFBU2xKLE9BRTFDSixRQUFTLFdBQ0xJLEtBQUtoQixXQUNBOEosSUFBSSxvQkFBcUI5SSxLQUFLeUssV0FDOUJsRyxHQUFHLHNCQUF1QnZFLEtBQUswSyxVQUMvQm5HLEdBQUcsc0JBQXVCdkUsS0FBS29MLFVBRXBDcEwsS0FBS0YsV0FFVEQsU0FBVSxXQUNORyxLQUFLcUwsU0FFTHJMLEtBQUtoQixXQUNBd0YsSUFBSSxvQkFBcUJ4RSxLQUFLeUssV0FDOUJqRyxJQUFJLHNCQUF1QnhFLEtBQUswSyxVQUNoQ2xHLElBQUksc0JBQXVCeEUsS0FBS29MLFVBRXJDcEwsS0FBS2lMLGVBQWlCLE1BRTFCbkwsUUFBUyxXQUNMLEdBQUlpTCxHQUFVL0ssS0FBS1MsUUFBUSxVQVUzQixJQVJBVCxLQUFLa0wsVUFDTGxMLEtBQUs2RCxVQUdEekYsRUFBRThELFdBQVc2SSxLQUNiQSxFQUFVQSxFQUFRaEosS0FBSy9CLE9BR1osTUFBWCtLLEVBQ0EvSyxLQUFLa0wsT0FBU2xMLEtBQUtzTCxzQkFRbkIsS0FOQSxHQUlJcEUsR0FKQXFFLEVBQVExTSxTQUFTa00sRUFBUyxLQUFPLEVBQ2pDeEgsRUFBUXZELEtBQUt3TCxvQkFDYlIsRUFBUSxFQUNSNUQsRUFBUSxJQUdDLENBR1QsR0FGQUYsRUFBTzNELEVBQU1ELEdBQUc4RCxLQUVJLElBQWhCRixFQUFLakksT0FDTCxLQUdDZSxNQUFLa0wsT0FBT0YsR0FHYmhMLEtBQUtrTCxPQUFPRixHQUFRaEwsS0FBS2tMLE9BQU9GLEdBQU01QixJQUFJbEMsR0FGMUNsSCxLQUFLa0wsT0FBT0YsR0FBUTlELEVBS3BCRSxFQUFJbUUsSUFBTyxHQUNYUCxJQUtaaEwsS0FBS3FMLFFBRUwsSUFBSWxILEdBQVduRSxLQUNYaEIsRUFBV2dCLEtBQUtoQixXQUFXbUIsS0FBSyxhQUNoQ3BCLEVBQVdpQixLQUFLUixTQUNoQnVGLEVBQVcvRSxLQUFLUyxRQUFRLFFBQ3hCZ0wsRUFBbUJ6TCxLQUFLd0wsb0JBQW9Cdk0sTUFFaERiLEdBQUUrQyxLQUFLbkIsS0FBS2tMLE9BQVEsU0FBU0YsRUFBTVUsR0FDL0IsR0FBSUMsR0FBV3hILEVBQUtOLE9BQU9tSCxHQUFRNU0sRUFBRTJHLEVBQUtoRCxLQUFLb0MsRUFBTTZHLEVBQU1VLEdBRTNEQyxHQUFTcEgsR0FBR0osRUFBSzFELFFBQVEsU0FBVyx1QkFBd0JyQyxFQUFFaUwsTUFBTSxXQUNoRSxHQUFJNUssR0FBU2lOLEVBQWNwSSxHQUFHLEVBRzlCLElBQUl0RSxFQUFTa0UsU0FBVSxDQUNuQixHQUFJMEksR0FBZTVNLEVBQVNnRyxNQUFNaEcsRUFBU1AsVUFDdkNvTixFQUFlN00sRUFBU2dHLE1BQU12RyxFQUU5QmlFLFlBQVdzSSxHQUFRdEksV0FBV3lCLEVBQUtnSCxjQUNwQlMsRUFBWEMsSUFDQXBOLEVBQVMsTUFBUWdOLEVBQW1CRyxFQUFlQyxJQUduREEsRUFBV0QsSUFDWG5OLEVBQVMsTUFBUW1OLEdBQWdCSCxFQUFtQkksS0FLaEU3TSxFQUFTZ0IsS0FBS1MsUUFBUSxXQUFXaEMsSUFDbEMwRixJQUVIcEYsRUFBUTJJLE9BQU9pRSxLQUduQjNMLEtBQUtrSixXQUVUQSxRQUFTLFdBQ0wsR0FDSTRDLEdBREFyTixFQUFTdUIsS0FBS2hCLFdBQVdxTCxVQUFVLFNBR3ZDak0sR0FBRStDLEtBQUtuQixLQUFLa0wsT0FBUSxTQUFTRixFQUFNVSxHQVEvQixNQVBBQSxHQUFjdkssS0FBSyxXQUNmLE1BQUkxQyxHQUFPc04sR0FBRy9MLE9BQ1Y4TCxFQUFjZCxHQUNQLEdBRlgsU0FNQWMsR0FDTyxFQURYLFNBS0E5TCxLQUFLbUwsZUFBaUJXLElBQ3RCOUwsS0FBS0ksU0FBUyxXQUFZSixLQUFLNkQsT0FBTzdELEtBQUttTCxlQUMzQ25MLEtBQUtJLFNBQVMsU0FBVUosS0FBSzZELE9BQU9pSSxLQUd4QzlMLEtBQUttTCxhQUFlVyxHQUV4QnZJLE1BQU8sV0FDSCxNQUFPdkQsTUFBSzZELFFBRWhCbUksb0JBQXFCLFdBRWpCLE1BREFoTSxNQUFLaUwsZUFBaUIsS0FDZmpMLE1BRVhxTCxPQUFRLFdBQ0pyTCxLQUFLUixTQUFTeU0sUUFDZGpNLEtBQUttTCxhQUFlLE1BRXhCRyxnQkFBaUIsV0FXYixJQVZBLEdBT0lwRSxHQUNBbEIsRUFSQWhILEVBQVdnQixLQUFLaEIsV0FBV21CLEtBQUssYUFDaENvRCxFQUFXdkQsS0FBS3dMLG9CQUNoQjVCLEVBQVc1SyxFQUFTK0csV0FDcEI0RCxFQUFXLEVBQ1hELEVBQVcsRUFDWHNCLEVBQVcsRUFDWGtCLE9BSVMsQ0FHVCxHQUZBaEYsRUFBTzNELEVBQU1ELEdBQUdvRyxLQUVJLElBQWhCeEMsRUFBS2pJLE9BQ0wsS0FHSitHLEdBQU1oSCxFQUFTaUgsVUFBVWlCLEdBRXBCeUMsRUFBSzNELEVBQU80RCxJQUNib0IsSUFDQXJCLEVBQUssR0FHVEEsR0FBTTNELEVBRURrRyxFQUFNbEIsR0FHUGtCLEVBQU1sQixHQUFRa0IsRUFBTWxCLEdBQU01QixJQUFJbEMsR0FGOUJnRixFQUFNbEIsR0FBUTlELEVBTXRCLE1BQU9nRixJQUVYVixrQkFBbUIsV0FLZixNQUpLeEwsTUFBS2lMLGlCQUNOakwsS0FBS2lMLGVBQWlCakwsS0FBS2hCLFdBQVdxTCxVQUFVLFVBRzdDckssS0FBS2lMLG1CQUd0QjNJLFFBRUQsU0FBU2xFLEVBQUcrTixHQUNULFlBRUEsSUFBSUMsR0FDQUMsRUFDQUMsR0FDSUMsT0FBUSxtQkFDUkMsVUFBVyxzQkFDWEMsU0FBVSxxQkFDVkMsYUFBYyx5QkFJdEJ0TyxHQUFFK0MsS0FBS21MLEVBQTRCLFNBQVM1TCxFQUFLK0IsR0FDN0MsTUFBNkIsbUJBQWxCMEosR0FBU3pMLElBQ2hCMEwsRUFBYTFMLEVBQ2IyTCxFQUF3QjVKLEdBQ2pCLEdBSFgsU0FPSnJFLEVBQUVDLFVBQVVrRCxPQUFPLHVCQUNmaEMsVUFDSWQsT0FBVyxNQUNYa08sU0FBVyxJQUNYQyxXQUFXLEdBRWZDLE9BQVEsS0FDUkMsVUFBVSxFQUNWcE4sTUFBTyxXQUNITSxLQUFLeUssVUFBWXJNLEVBQUVpTCxNQUFNLFdBQ3JCckosS0FBS0gsV0FDTEcsS0FBS2hCLFdBQ0E4SixJQUFJLHNCQUF1QjFLLEVBQUVpTCxNQUFNckosS0FBS0osUUFBU0ksUUFDdkRBLE1BRUhBLEtBQUsrTSxhQUFlM08sRUFBRWlMLE1BQU1ySixLQUFLZ04sT0FBUWhOLE1BRXpDQSxLQUFLaU4sbUJBQXFCN08sRUFBRWlMLE1BQU0sV0FDMUI4QyxFQUFTQyxHQUNUcE0sS0FBS2tOLFFBRUxsTixLQUFLZ04sVUFFVmhOLE9BRVBKLFFBQVMsV0FDTEksS0FBS2hCLFdBQ0E4SixJQUFJLG9CQUFxQjlJLEtBQUt5SyxXQUVuQ3JNLEVBQUUrTixHQUNHNUgsR0FBRzhILEVBQXVCck0sS0FBS2lOLG9CQUVoQ2pOLEtBQUtTLFFBQVEsY0FDYlQsS0FBS2lILFNBR2JwSCxTQUFVLFdBQ05HLEtBQUtrTixRQUVMbE4sS0FBS2hCLFdBQ0F3RixJQUFJLG9CQUFxQnhFLEtBQUt5SyxXQUVuQ3JNLEVBQUUrTixHQUNHM0gsSUFBSTZILEVBQXVCck0sS0FBS2lOLHFCQUV6Q0QsT0FBUSxXQUdKLE1BRkFoTixNQUFLa04sUUFFQWxOLEtBQUs4TSxVQUlWOU0sS0FBS2hCLFdBQ0E4SixJQUFJLHVCQUF3QjlJLEtBQUsrTSxjQUV0Qy9NLEtBQUs2TSxPQUFTdkksV0FBV2xHLEVBQUVpTCxNQUFNLFdBQzdCckosS0FBS2hCLFdBQVdxTCxVQUFVLFNBQVVySyxLQUFLUyxRQUFRLFlBQ2xEVCxNQUFPQSxLQUFLUyxRQUFRLGFBRWhCVCxNQVhQLFFBYUprTixNQUFPLFdBUUgsTUFQSWxOLE1BQUs2TSxTQUNMN00sS0FBSzZNLE9BQVN4SSxhQUFhckUsS0FBSzZNLFNBR3BDN00sS0FBS2hCLFdBQ0F3RixJQUFJLHVCQUF3QnhFLEtBQUsrTSxjQUUvQi9NLE1BRVhpSCxNQUFPLFdBSUgsTUFIQWpILE1BQUs4TSxVQUFXLEVBQ2hCOU0sS0FBS2dOLFNBRUVoTixNQUVYNkYsS0FBTSxXQUlGLE1BSEE3RixNQUFLOE0sVUFBVyxFQUNoQjlNLEtBQUtrTixRQUVFbE4sU0FHakJzQyxPQUFRNkosVUFDVi9OLEVBQUUsV0FHQUEsRUFBRSxjQUFjaU0sV0FFWjdHLFVBQVcsT0FDWEUsS0FBTSxhQUtWdEYsRUFBRSxtQkFBbUIrTyxrQkFDakIxTyxPQUFRLFFBR1pMLEVBQUUsbUJBQW1CK08sa0JBQ2pCMU8sT0FBUSxRQUtaTCxFQUFFLGNBQWNnUCxxQkFDWlQsU0FBVSxJQUNWbE8sT0FBUSxNQUNSbU8sV0FBVyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ3VzdG9tXHJcbiAqL1xyXG4vKiEgakNhcm91c2VsIC0gdjAuMy40IC0gMjAxNS0wOS0yM1xyXG4qIGh0dHA6Ly9zb3JnYWxsYS5jb20vamNhcm91c2VsL1xyXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDE1IEphbiBTb3JnYWxsYTsgTGljZW5zZWQgTUlUICovXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGpDYXJvdXNlbCA9ICQuakNhcm91c2VsID0ge307XHJcblxyXG4gICAgakNhcm91c2VsLnZlcnNpb24gPSAnMC4zLjQnO1xyXG5cclxuICAgIHZhciByUmVsYXRpdmVUYXJnZXQgPSAvXihbK1xcLV09KT8oLispJC87XHJcblxyXG4gICAgakNhcm91c2VsLnBhcnNlVGFyZ2V0ID0gZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gZmFsc2UsXHJcbiAgICAgICAgICAgIHBhcnRzICAgID0gdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByUmVsYXRpdmVUYXJnZXQuZXhlYyh0YXJnZXQpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHBhcnRzWzJdLCAxMCkgfHwgMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChwYXJ0c1sxXSkge1xyXG4gICAgICAgICAgICAgICAgcmVsYXRpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzWzFdID09PSAnLT0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSBwYXJzZUludCh0YXJnZXQsIDEwKSB8fCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGpDYXJvdXNlbC5kZXRlY3RDYXJvdXNlbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgY2Fyb3VzZWw7XHJcblxyXG4gICAgICAgIHdoaWxlIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY2Fyb3VzZWwgPSBlbGVtZW50LmZpbHRlcignW2RhdGEtamNhcm91c2VsXScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhcm91c2VsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJvdXNlbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2Fyb3VzZWwgPSBlbGVtZW50LmZpbmQoJ1tkYXRhLWpjYXJvdXNlbF0nKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXJvdXNlbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2Fyb3VzZWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIGpDYXJvdXNlbC5iYXNlID0gZnVuY3Rpb24ocGx1Z2luTmFtZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcnNpb246ICBqQ2Fyb3VzZWwudmVyc2lvbixcclxuICAgICAgICAgICAgX29wdGlvbnM6ICB7fSxcclxuICAgICAgICAgICAgX2VsZW1lbnQ6ICBudWxsLFxyXG4gICAgICAgICAgICBfY2Fyb3VzZWw6IG51bGwsXHJcbiAgICAgICAgICAgIF9pbml0OiAgICAgJC5ub29wLFxyXG4gICAgICAgICAgICBfY3JlYXRlOiAgICQubm9vcCxcclxuICAgICAgICAgICAgX2Rlc3Ryb3k6ICAkLm5vb3AsXHJcbiAgICAgICAgICAgIF9yZWxvYWQ6ICAgJC5ub29wLFxyXG4gICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lLnRvTG93ZXJDYXNlKCksIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEocGx1Z2luTmFtZSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdjcmVhdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NyZWF0ZWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcignZGVzdHJveScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2Rlc3Ryb3llbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEocGx1Z2luTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS0nICsgcGx1Z2luTmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVsb2FkOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ3JlbG9hZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVsb2FkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcigncmVsb2FkZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX29wdGlvbnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhcm91c2VsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2Fyb3VzZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXJvdXNlbCA9IGpDYXJvdXNlbC5kZXRlY3RDYXJvdXNlbCh0aGlzLm9wdGlvbnMoJ2Nhcm91c2VsJykgfHwgdGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2Fyb3VzZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lcnJvcignQ291bGQgbm90IGRldGVjdCBjYXJvdXNlbCBmb3IgcGx1Z2luIFwiJyArIHBsdWdpbk5hbWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nhcm91c2VsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfdHJpZ2dlcjogZnVuY3Rpb24odHlwZSwgZWxlbWVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhID0gW3RoaXNdLmNvbmNhdChkYXRhIHx8IFtdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAoZWxlbWVudCB8fCB0aGlzLl9lbGVtZW50KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gJC5FdmVudCgocGx1Z2luTmFtZSArICc6JyArIHR5cGUpLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoZXZlbnQsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFkZWZhdWx0UHJldmVudGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLnBsdWdpbiA9IGZ1bmN0aW9uKHBsdWdpbk5hbWUsIHBsdWdpblByb3RvdHlwZSkge1xyXG4gICAgICAgIHZhciBQbHVnaW4gPSAkW3BsdWdpbk5hbWVdID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gJChlbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zKG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faW5pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFBsdWdpbi5mbiA9IFBsdWdpbi5wcm90b3R5cGUgPSAkLmV4dGVuZChcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIGpDYXJvdXNlbC5iYXNlKHBsdWdpbk5hbWUpLFxyXG4gICAgICAgICAgICBwbHVnaW5Qcm90b3R5cGVcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkLmZuW3BsdWdpbk5hbWVdID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICB2YXIgYXJncyAgICAgICAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9ICQodGhpcykuZGF0YShwbHVnaW5OYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5lcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDYW5ub3QgY2FsbCBtZXRob2RzIG9uICcgKyBwbHVnaW5OYW1lICsgJyBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kIFwiJyArIG9wdGlvbnMgKyAnXCInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNGdW5jdGlvbihpbnN0YW5jZVtvcHRpb25zXSkgfHwgb3B0aW9ucy5jaGFyQXQoMCkgPT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5lcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdObyBzdWNoIG1ldGhvZCBcIicgKyBvcHRpb25zICsgJ1wiIGZvciAnICsgcGx1Z2luTmFtZSArICcgaW5zdGFuY2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kVmFsdWUgPSBpbnN0YW5jZVtvcHRpb25zXS5hcHBseShpbnN0YW5jZSwgYXJncyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgdHlwZW9mIG1ldGhvZFZhbHVlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKHBsdWdpbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBQbHVnaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucmVsb2FkKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQbHVnaW4odGhpcywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gUGx1Z2luO1xyXG4gICAgfTtcclxufShqUXVlcnkpKTtcclxuXHJcbihmdW5jdGlvbigkLCB3aW5kb3cpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgdG9GbG9hdCA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbCkgfHwgMDtcclxuICAgIH07XHJcblxyXG4gICAgJC5qQ2Fyb3VzZWwucGx1Z2luKCdqY2Fyb3VzZWwnLCB7XHJcbiAgICAgICAgYW5pbWF0aW5nOiAgIGZhbHNlLFxyXG4gICAgICAgIHRhaWw6ICAgICAgICAwLFxyXG4gICAgICAgIGluVGFpbDogICAgICBmYWxzZSxcclxuICAgICAgICByZXNpemVUaW1lcjogbnVsbCxcclxuICAgICAgICBsdDogICAgICAgICAgbnVsbCxcclxuICAgICAgICB2ZXJ0aWNhbDogICAgZmFsc2UsXHJcbiAgICAgICAgcnRsOiAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgIGNpcmN1bGFyOiAgICBmYWxzZSxcclxuICAgICAgICB1bmRlcmZsb3c6ICAgZmFsc2UsXHJcbiAgICAgICAgcmVsYXRpdmU6ICAgIGZhbHNlLFxyXG5cclxuICAgICAgICBfb3B0aW9uczoge1xyXG4gICAgICAgICAgICBsaXN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQoKS5jaGlsZHJlbigpLmVxKDApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KCkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0aW9uOiAgIDQwMCxcclxuICAgICAgICAgICAgdHJhbnNpdGlvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICB3cmFwOiAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgdmVydGljYWw6ICAgIG51bGwsXHJcbiAgICAgICAgICAgIHJ0bDogICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBjZW50ZXI6ICAgICAgZmFsc2VcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBQcm90ZWN0ZWQsIGRvbid0IGFjY2VzcyBkaXJlY3RseVxyXG4gICAgICAgIF9saXN0OiAgICAgICAgIG51bGwsXHJcbiAgICAgICAgX2l0ZW1zOiAgICAgICAgbnVsbCxcclxuICAgICAgICBfdGFyZ2V0OiAgICAgICAkKCksXHJcbiAgICAgICAgX2ZpcnN0OiAgICAgICAgJCgpLFxyXG4gICAgICAgIF9sYXN0OiAgICAgICAgICQoKSxcclxuICAgICAgICBfdmlzaWJsZTogICAgICAkKCksXHJcbiAgICAgICAgX2Z1bGx5dmlzaWJsZTogJCgpLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucmVzaXplVGltZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5yZXNpemVUaW1lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXNpemVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplLmpjYXJvdXNlbCcsIHRoaXMub25XaW5kb3dSZXNpemUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuamNhcm91c2VsJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcmVsb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHRoaXMub3B0aW9ucygndmVydGljYWwnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVydGljYWwgPSB0aGlzLmxpc3QoKS5oZWlnaHQoKSA+IHRoaXMubGlzdCgpLndpZHRoKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucnRsID0gdGhpcy5vcHRpb25zKCdydGwnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ0bCA9IChmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgnJyArIGVsZW1lbnQuYXR0cignZGlyJykpLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cygnW2Rpcl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKC9ydGwvaSkudGVzdCgkKHRoaXMpLmF0dHIoJ2RpcicpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZDtcclxuICAgICAgICAgICAgICAgIH0odGhpcy5fZWxlbWVudCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmx0ID0gdGhpcy52ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnO1xyXG5cclxuICAgICAgICAgICAgLy8gRW5zdXJlIGJlZm9yZSBjbG9zZXN0KCkgY2FsbFxyXG4gICAgICAgICAgICB0aGlzLnJlbGF0aXZlID0gdGhpcy5saXN0KCkuY3NzKCdwb3NpdGlvbicpID09PSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAgICAgLy8gRm9yY2UgbGlzdCBhbmQgaXRlbXMgcmVsb2FkXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3QgID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmluZGV4KHRoaXMuX3RhcmdldCkgPj0gMCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VzdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gX3ByZXBhcmUoKSBuZWVkcyB0aGlzIGhlcmVcclxuICAgICAgICAgICAgdGhpcy5jaXJjdWxhciAgPSB0aGlzLm9wdGlvbnMoJ3dyYXAnKSA9PT0gJ2NpcmN1bGFyJztcclxuICAgICAgICAgICAgdGhpcy51bmRlcmZsb3cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHsnbGVmdCc6IDAsICd0b3AnOiAwfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmUoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3QoKS5maW5kKCdbZGF0YS1qY2Fyb3VzZWwtY2xvbmVdJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRm9yY2UgaXRlbXMgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy51bmRlcmZsb3cgPSB0aGlzLl9mdWxseXZpc2libGUubGVuZ3RoID49IHRoaXMuaXRlbXMoKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNpcmN1bGFyICA9IHRoaXMuY2lyY3VsYXIgJiYgIXRoaXMudW5kZXJmbG93O1xyXG5cclxuICAgICAgICAgICAgICAgIHByb3BzW3RoaXMubHRdID0gdGhpcy5fcG9zaXRpb24oaXRlbSkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1vdmUocHJvcHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3QgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnMoJ2xpc3QnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3QgPSAkLmlzRnVuY3Rpb24ob3B0aW9uKSA/IG9wdGlvbi5jYWxsKHRoaXMpIDogdGhpcy5fZWxlbWVudC5maW5kKG9wdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXRlbXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnMoJ2l0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9ICgkLmlzRnVuY3Rpb24ob3B0aW9uKSA/IG9wdGlvbi5jYWxsKHRoaXMpIDogdGhpcy5saXN0KCkuZmluZChvcHRpb24pKS5ub3QoJ1tkYXRhLWpjYXJvdXNlbC1jbG9uZV0nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5kZXg6IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMoKS5pbmRleChpdGVtKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgID0gdGhpcy5saXN0KCkucG9zaXRpb24oKVt0aGlzLmx0XSxcclxuICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSAkKCksIC8vIEVuc3VyZSB3ZSdyZSByZXR1cm5pbmcgYSBqUXVlcnkgaW5zdGFuY2VcclxuICAgICAgICAgICAgICAgIHN0b3AgICAgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxyYiAgICAgPSB0aGlzLnZlcnRpY2FsID8gJ2JvdHRvbScgOiAodGhpcy5ydGwgJiYgIXRoaXMucmVsYXRpdmUgPyAnbGVmdCcgOiAncmlnaHQnKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmIHRoaXMucmVsYXRpdmUgJiYgIXRoaXMudmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIHBvcyArPSB0aGlzLmxpc3QoKS53aWR0aCgpIC0gdGhpcy5jbGlwcGluZygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLml0ZW1zKCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkaW0gPSBzZWxmLmRpbWVuc2lvbihjbG9zZXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwb3MgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gZGltIC0gdG9GbG9hdChjbG9zZXN0LmNzcygnbWFyZ2luLScgKyBscmIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChNYXRoLmFicyhwb3MpIC0gZGltICsgKHdpZHRoIC8gMikpIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlyc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYXN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdWxseXZpc2libGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZnVsbHl2aXNpYmxlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcignaGFzbmV4dCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHdyYXAgPSB0aGlzLm9wdGlvbnMoJ3dyYXAnKSxcclxuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuaXRlbXMoKS5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgY2hlY2sgPSB0aGlzLm9wdGlvbnMoJ2NlbnRlcicpID8gdGhpcy5fdGFyZ2V0IDogdGhpcy5fbGFzdDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlbmQgPj0gMCAmJiAhdGhpcy51bmRlcmZsb3cgJiZcclxuICAgICAgICAgICAgICAgICgod3JhcCAmJiB3cmFwICE9PSAnZmlyc3QnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmluZGV4KGNoZWNrKSA8IGVuZCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy50YWlsICYmICF0aGlzLmluVGFpbCkpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzUHJldjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcignaGFzcHJldicpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHdyYXAgPSB0aGlzLm9wdGlvbnMoJ3dyYXAnKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zKCkubGVuZ3RoID4gMCAmJiAhdGhpcy51bmRlcmZsb3cgJiZcclxuICAgICAgICAgICAgICAgICgod3JhcCAmJiB3cmFwICE9PSAnbGFzdCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgodGhpcy5fZmlyc3QpID4gMCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy50YWlsICYmIHRoaXMuaW5UYWlsKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGlwcGluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50Wydpbm5lcicgKyAodGhpcy52ZXJ0aWNhbCA/ICdIZWlnaHQnIDogJ1dpZHRoJyldKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaW1lbnNpb246IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbJ291dGVyJyArICh0aGlzLnZlcnRpY2FsID8gJ0hlaWdodCcgOiAnV2lkdGgnKV0odHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzY3JvbGw6IGZ1bmN0aW9uKHRhcmdldCwgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdzY3JvbGwnLCBudWxsLCBbdGFyZ2V0LCBhbmltYXRlXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGFuaW1hdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFuaW1hdGU7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRlICA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnNlZC5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuZCAgICA9IHRoaXMuaXRlbXMoKS5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbCA9IE1hdGguYWJzKHBhcnNlZC50YXJnZXQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdyYXAgICA9IHRoaXMub3B0aW9ucygnd3JhcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycixcclxuICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnRhcmdldCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHRoaXMuaW5kZXgodGhpcy5fbGFzdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0ID49IGVuZCAmJiB0aGlzLnRhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluVGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVGFpbChhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod3JhcCA9PT0gJ2JvdGgnIHx8IHdyYXAgPT09ICdsYXN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbCgwLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmluZGV4KHRoaXMuX3RhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMudW5kZXJmbG93ICYmIGN1cnJlbnQgPT09IGVuZCAmJiAod3JhcCA9PT0gJ2NpcmN1bGFyJyB8fCB3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2xhc3QnKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghdGhpcy51bmRlcmZsb3cgJiYgbGFzdCA9PT0gZW5kICYmICh3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2xhc3QnKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbCgwLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGN1cnJlbnQgKyBzY3JvbGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2lyY3VsYXIgJiYgaW5kZXggPiBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSB0aGlzLml0ZW1zKCkuZ2V0KC0xKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkrKyA8IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSB0aGlzLml0ZW1zKCkuZXEoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkuYXBwZW5kKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1t0aGlzLmx0XSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlQnkocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZSBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKGN1cnIsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKE1hdGgubWluKGluZGV4LCBlbmQpLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluVGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5tYXgoKHRoaXMuaW5kZXgodGhpcy5fZmlyc3QpIC0gc2Nyb2xsKSArIDEsIDApLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgID0gdGhpcy5pbmRleCh0aGlzLl9maXJzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmluZGV4KHRoaXMuX3RhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ICA9IHRoaXMudW5kZXJmbG93ID8gY3VycmVudCA6IGZpcnN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCAgPSBzdGFydCAtIHNjcm9sbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydCA8PSAwICYmICgodGhpcy51bmRlcmZsb3cgJiYgd3JhcCA9PT0gJ2NpcmN1bGFyJykgfHwgd3JhcCA9PT0gJ2JvdGgnIHx8IHdyYXAgPT09ICdmaXJzdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoZW5kLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaXJjdWxhciAmJiBpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICAgID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5nZXQoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpKysgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSB0aGlzLml0ZW1zKCkuZXEoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUgPSB0aGlzLl92aXNpYmxlLmluZGV4KGN1cnIpID49IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyLmFmdGVyKGN1cnIuY2xvbmUodHJ1ZSkuYXR0cignZGF0YS1qY2Fyb3VzZWwtY2xvbmUnLCB0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdCgpLnByZXBlbmQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZSBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSAtZGltO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCeShwcm9wcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKGN1cnIsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKE1hdGgubWF4KGluZGV4LCAwKSwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKHBhcnNlZC50YXJnZXQsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignc2Nyb2xsZW5kJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmVCeTogZnVuY3Rpb24ocHJvcGVydGllcywgb3B0cykge1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IDEsXHJcbiAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbiA9IHRoaXMubGlzdCgpLndpZHRoKCkgLSB0aGlzLmNsaXBwaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMubGVmdCA9IChwb3NpdGlvbi5sZWZ0ICsgY29ycmVjdGlvbiArIHRvRmxvYXQocHJvcGVydGllcy5sZWZ0KSAqIG11bHRpcGxpZXIpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMudG9wKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnRvcCA9IChwb3NpdGlvbi50b3AgKyBjb3JyZWN0aW9uICsgdG9GbG9hdChwcm9wZXJ0aWVzLnRvcCkgKiBtdWx0aXBsaWVyKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdmUocHJvcGVydGllcywgb3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3ZlOiBmdW5jdGlvbihwcm9wZXJ0aWVzLCBvcHRzKSB7XHJcbiAgICAgICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIG9wdGlvbiAgICAgICA9IHRoaXMub3B0aW9ucygndHJhbnNpdGlvbnMnKSxcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25zICA9ICEhb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtcyAgID0gISFvcHRpb24udHJhbnNmb3JtcyxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXMzZCA9ICEhb3B0aW9uLnRyYW5zZm9ybXMzZCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uICAgICA9IG9wdHMuZHVyYXRpb24gfHwgMCxcclxuICAgICAgICAgICAgICAgIGxpc3QgICAgICAgICA9IHRoaXMubGlzdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0cmFuc2l0aW9ucyAmJiBkdXJhdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxpc3QuYW5pbWF0ZShwcm9wZXJ0aWVzLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gb3B0cy5jb21wbGV0ZSB8fCAkLm5vb3AsXHJcbiAgICAgICAgICAgICAgICBjc3MgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJhY2t1cCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBsaXN0LmNzcygndHJhbnNpdGlvbkR1cmF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogbGlzdC5jc3MoJ3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IGxpc3QuY3NzKCd0cmFuc2l0aW9uUHJvcGVydHknKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkQ29tcGxldGUgPSBjb21wbGV0ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKGJhY2t1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkQ29tcGxldGUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjc3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAoZHVyYXRpb24gPiAwID8gZHVyYXRpb24gLyAxMDAwIDogMCkgKyAncycsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBvcHRpb24uZWFzaW5nIHx8IG9wdHMuZWFzaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogZHVyYXRpb24gPiAwID8gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtcyB8fCB0cmFuc2Zvcm1zM2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gdXNlICdhbGwnIGJlY2F1c2UgalF1ZXJ5IGRvZXNuJ3QgcHJlZml4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjc3MgdmFsdWVzLCBsaWtlIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYWxsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnRpZXMubGVmdCA/ICdsZWZ0JyA6ICd0b3AnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKCkgOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAnbm9uZSdcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1zM2QpIHtcclxuICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIChwcm9wZXJ0aWVzLmxlZnQgfHwgMCkgKyAnLCcgKyAocHJvcGVydGllcy50b3AgfHwgMCkgKyAnLDApJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2Zvcm1zKSB7XHJcbiAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgKHByb3BlcnRpZXMubGVmdCB8fCAwKSArICcsJyArIChwcm9wZXJ0aWVzLnRvcCB8fCAwKSArICcpJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKGNzcywgcHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9ucyAmJiBkdXJhdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxpc3Qub25lKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsaXN0LmNzcyhjc3MpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGR1cmF0aW9uIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGxpc3QuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zY3JvbGw6IGZ1bmN0aW9uKGl0ZW0sIGFuaW1hdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgaXRlbSA9IHRoaXMuaXRlbXMoKS5lcShpdGVtKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5qcXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtID0gJChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluVGFpbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZShpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwb3MgICAgID0gdGhpcy5fcG9zaXRpb24oaXRlbSksXHJcbiAgICAgICAgICAgICAgICBjdXJyUG9zID0gdGhpcy5saXN0KCkucG9zaXRpb24oKVt0aGlzLmx0XTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwb3MgPT09IGN1cnJQb3MpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXNbdGhpcy5sdF0gPSBwb3MgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZShwcm9wZXJ0aWVzLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zY3JvbGxUYWlsOiBmdW5jdGlvbihhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcgfHwgIXRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBvcyA9IHRoaXMubGlzdCgpLnBvc2l0aW9uKClbdGhpcy5sdF07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ydGwgJiYgdGhpcy5yZWxhdGl2ZSAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMubGlzdCgpLndpZHRoKCkgLSB0aGlzLmNsaXBwaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMudGFpbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvcyAtPSB0aGlzLnRhaWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5UYWlsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXNbdGhpcy5sdF0gPSBwb3MgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgdGhpcy5fdGFyZ2V0Lm5leHQoKSxcclxuICAgICAgICAgICAgICAgIGZ1bGx5dmlzaWJsZTogdGhpcy5fZnVsbHl2aXNpYmxlLnNsaWNlKDEpLmFkZCh0aGlzLl92aXNpYmxlLmxhc3QoKSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlKHByb3BlcnRpZXMsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2FuaW1hdGU6IGZ1bmN0aW9uKHByb3BlcnRpZXMsIGFuaW1hdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgJC5ub29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdhbmltYXRlJykpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLm9wdGlvbnMoJ2FuaW1hdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGUgID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMubGlzdCgpLmZpbmQoJ1tkYXRhLWpjYXJvdXNlbC1jbG9uZV0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2FuaW1hdGVlbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG9wdHMgPSB0eXBlb2YgYW5pbWF0aW9uID09PSAnb2JqZWN0JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHt9LCBhbmltYXRpb24pIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAge2R1cmF0aW9uOiBhbmltYXRpb259LFxyXG4gICAgICAgICAgICAgICAgb2xkQ29tcGxldGUgPSBvcHRzLmNvbXBsZXRlIHx8ICQubm9vcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmltYXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5kdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mICQuZnguc3BlZWRzW29wdHMuZHVyYXRpb25dICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5kdXJhdGlvbiA9ICQuZnguc3BlZWRzW29wdHMuZHVyYXRpb25dO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRzLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgb2xkQ29tcGxldGUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92ZShwcm9wZXJ0aWVzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3ByZXBhcmU6IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ICA9IHRoaXMuaW5kZXgoaXRlbSksXHJcbiAgICAgICAgICAgICAgICBpZHggICAgPSBpbmRleCxcclxuICAgICAgICAgICAgICAgIHdoICAgICA9IHRoaXMuZGltZW5zaW9uKGl0ZW0pLFxyXG4gICAgICAgICAgICAgICAgY2xpcCAgID0gdGhpcy5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICAgICAgbHJiICAgID0gdGhpcy52ZXJ0aWNhbCA/ICdib3R0b20nIDogKHRoaXMucnRsID8gJ2xlZnQnICA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyID0gdGhpcy5vcHRpb25zKCdjZW50ZXInKSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6ICAgICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVsbHl2aXNpYmxlOiB3aCA8PSBjbGlwID8gaXRlbSA6ICQoKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGN1cnIsXHJcbiAgICAgICAgICAgICAgICBpc1Zpc2libGUsXHJcbiAgICAgICAgICAgICAgICBtYXJnaW4sXHJcbiAgICAgICAgICAgICAgICBkaW07XHJcblxyXG4gICAgICAgICAgICBpZiAoY2VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICB3aCAvPSAyO1xyXG4gICAgICAgICAgICAgICAgY2xpcCAvPSAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAod2ggPCBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnIgPSB0aGlzLml0ZW1zKCkuZXEoKytpZHgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNpcmN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldCgwKSA9PT0gY3Vyci5nZXQoMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUgPSB0aGlzLl92aXNpYmxlLmluZGV4KGN1cnIpID49IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyLmFmdGVyKGN1cnIuY2xvbmUodHJ1ZSkuYXR0cignZGF0YS1qY2Fyb3VzZWwtY2xvbmUnLCB0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdCgpLmFwcGVuZChjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW3RoaXMubHRdID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCeShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkaW0gPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpbSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoICs9IGRpbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLmxhc3QgICAgPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZS52aXNpYmxlID0gdXBkYXRlLnZpc2libGUuYWRkKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcmlnaHQvYm90dG9tIG1hcmdpbiBmcm9tIHRvdGFsIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0gdG9GbG9hdChjdXJyLmNzcygnbWFyZ2luLScgKyBscmIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh3aCAtIG1hcmdpbikgPD0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuZnVsbHl2aXNpYmxlID0gdXBkYXRlLmZ1bGx5dmlzaWJsZS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2ggPj0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jaXJjdWxhciAmJiAhY2VudGVyICYmIHdoIDwgY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgaWR4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoLS1pZHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcShpZHgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkaW0gPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpbSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoICs9IGRpbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLmZpcnN0ICAgPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZS52aXNpYmxlID0gdXBkYXRlLnZpc2libGUuYWRkKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcmlnaHQvYm90dG9tIG1hcmdpbiBmcm9tIHRvdGFsIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0gdG9GbG9hdChjdXJyLmNzcygnbWFyZ2luLScgKyBscmIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh3aCAtIG1hcmdpbikgPD0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuZnVsbHl2aXNpYmxlID0gdXBkYXRlLmZ1bGx5dmlzaWJsZS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2ggPj0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSh1cGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50YWlsID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICghY2VudGVyICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMoJ3dyYXAnKSAhPT0gJ2NpcmN1bGFyJyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zKCd3cmFwJykgIT09ICdjdXN0b20nICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4KHVwZGF0ZS5sYXN0KSA9PT0gKHRoaXMuaXRlbXMoKS5sZW5ndGggLSAxKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgIHdoIC09IHRvRmxvYXQodXBkYXRlLmxhc3QuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aCA+IGNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhaWwgPSB3aCAtIGNsaXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Bvc2l0aW9uOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdCAgPSB0aGlzLl9maXJzdCxcclxuICAgICAgICAgICAgICAgIHBvcyAgICA9IGZpcnN0LnBvc2l0aW9uKClbdGhpcy5sdF0sXHJcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSB0aGlzLm9wdGlvbnMoJ2NlbnRlcicpLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gY2VudGVyID8gKHRoaXMuY2xpcHBpbmcoKSAvIDIpIC0gKHRoaXMuZGltZW5zaW9uKGZpcnN0KSAvIDIpIDogMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuZGltZW5zaW9uKGZpcnN0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zIC09IHRoaXMuY2xpcHBpbmcoKSAtIHRoaXMuZGltZW5zaW9uKGZpcnN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gY2VudGVyT2Zmc2V0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9zIC09IGNlbnRlck9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjZW50ZXIgJiZcclxuICAgICAgICAgICAgICAgICh0aGlzLmluZGV4KGl0ZW0pID4gdGhpcy5pbmRleChmaXJzdCkgfHwgdGhpcy5pblRhaWwpICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhaWwpIHtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsID8gcG9zIC0gdGhpcy50YWlsIDogcG9zICsgdGhpcy50YWlsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pblRhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pblRhaWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIC1wb3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdXBkYXRlOiBmdW5jdGlvbih1cGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICAgICAgIHRoaXMuX3RhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogICAgICAgIHRoaXMuX2ZpcnN0LFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6ICAgICAgICAgdGhpcy5fbGFzdCxcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiAgICAgIHRoaXMuX3Zpc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVsbHl2aXNpYmxlOiB0aGlzLl9mdWxseXZpc2libGVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBiYWNrID0gdGhpcy5pbmRleCh1cGRhdGUuZmlyc3QgfHwgY3VycmVudC5maXJzdCkgPCB0aGlzLmluZGV4KGN1cnJlbnQuZmlyc3QpLFxyXG4gICAgICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICAgICAgZG9VcGRhdGUgPSBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxJbiAgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxPdXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlW2tleV0uZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRba2V5XS5pbmRleCh0aGlzKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsSW4ucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50W2tleV0uZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVtrZXldLmluZGV4KHRoaXMpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxPdXQucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbEluID0gZWxJbi5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxPdXQgPSBlbE91dC5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLl90cmlnZ2VyKGtleSArICdpbicsICQoZWxJbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXIoa2V5ICsgJ291dCcsICQoZWxPdXQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZlsnXycgKyBrZXldID0gdXBkYXRlW2tleV07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gdXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBkb1VwZGF0ZShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufShqUXVlcnksIHdpbmRvdykpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpjYXJvdXNlbC5mbi5zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKHRhcmdldCwgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgcGFyc2VkID0gJC5qQ2Fyb3VzZWwucGFyc2VUYXJnZXQodGFyZ2V0KSxcclxuICAgICAgICAgICAgZmlyc3QgID0gdGhpcy5pbmRleCh0aGlzLl9mdWxseXZpc2libGUuZmlyc3QoKSksXHJcbiAgICAgICAgICAgIGxhc3QgICA9IHRoaXMuaW5kZXgodGhpcy5fZnVsbHl2aXNpYmxlLmxhc3QoKSksXHJcbiAgICAgICAgICAgIGluZGV4O1xyXG5cclxuICAgICAgICBpZiAocGFyc2VkLnJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gcGFyc2VkLnRhcmdldCA8IDAgPyBNYXRoLm1heCgwLCBmaXJzdCArIHBhcnNlZC50YXJnZXQpIDogbGFzdCArIHBhcnNlZC50YXJnZXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0eXBlb2YgcGFyc2VkLnRhcmdldCAhPT0gJ29iamVjdCcgPyBwYXJzZWQudGFyZ2V0IDogdGhpcy5pbmRleChwYXJzZWQudGFyZ2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA8IGZpcnN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjcm9sbChpbmRleCwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZGV4ID49IGZpcnN0ICYmIGluZGV4IDw9IGxhc3QpIHtcclxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXMoKSxcclxuICAgICAgICAgICAgY2xpcCA9IHRoaXMuY2xpcHBpbmcoKSxcclxuICAgICAgICAgICAgbHJiICA9IHRoaXMudmVydGljYWwgPyAnYm90dG9tJyA6ICh0aGlzLnJ0bCA/ICdsZWZ0JyAgOiAncmlnaHQnKSxcclxuICAgICAgICAgICAgd2ggICA9IDAsXHJcbiAgICAgICAgICAgIGN1cnI7XHJcblxyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGN1cnIgPSBpdGVtcy5lcShpbmRleCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aCArPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gcGFyc2VGbG9hdChjdXJyLmNzcygnbWFyZ2luLScgKyBscmIpKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKCh3aCAtIG1hcmdpbikgIT09IGNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5kZXgtLTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbChpbmRleCwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxufShqUXVlcnkpKTtcclxuXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgJC5qQ2Fyb3VzZWwucGx1Z2luKCdqY2Fyb3VzZWxDb250cm9sJywge1xyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHRhcmdldDogJys9MScsXHJcbiAgICAgICAgICAgIGV2ZW50OiAgJ2NsaWNrJyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnc2Nyb2xsJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2FjdGl2ZTogbnVsbCxcclxuICAgICAgICBfaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EZXN0cm95ID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDpjcmVhdGVlbmQnLCAkLnByb3h5KHRoaXMuX2NyZWF0ZSwgdGhpcykpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vblJlbG9hZCA9ICQucHJveHkodGhpcy5fcmVsb2FkLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vbkV2ZW50ID0gJC5wcm94eShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMub3B0aW9ucygnbWV0aG9kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihtZXRob2QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuamNhcm91c2VsKHRoaXMub3B0aW9ucygnbWV0aG9kJyksIHRoaXMub3B0aW9ucygndGFyZ2V0JykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub24oJ2pjYXJvdXNlbDpyZWxvYWRlbmQgamNhcm91c2VsOnNjcm9sbGVuZCcsIHRoaXMub25SZWxvYWQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgLm9uKHRoaXMub3B0aW9ucygnZXZlbnQnKSArICcuamNhcm91c2VsY29udHJvbCcsIHRoaXMub25FdmVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgLm9mZignLmpjYXJvdXNlbGNvbnRyb2wnLCB0aGlzLm9uRXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOnJlbG9hZGVuZCBqY2Fyb3VzZWw6c2Nyb2xsZW5kJywgdGhpcy5vblJlbG9hZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcmVsb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHBhcnNlZCAgID0gJC5qQ2Fyb3VzZWwucGFyc2VUYXJnZXQodGhpcy5vcHRpb25zKCd0YXJnZXQnKSksXHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwYXJzZWQucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGNhcm91c2VsXHJcbiAgICAgICAgICAgICAgICAgICAgLmpjYXJvdXNlbChwYXJzZWQudGFyZ2V0ID4gMCA/ICdoYXNOZXh0JyA6ICdoYXNQcmV2Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdHlwZW9mIHBhcnNlZC50YXJnZXQgIT09ICdvYmplY3QnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbC5qY2Fyb3VzZWwoJ2l0ZW1zJykuZXEocGFyc2VkLnRhcmdldCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZC50YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gY2Fyb3VzZWwuamNhcm91c2VsKCd0YXJnZXQnKS5pbmRleCh0YXJnZXQpID49IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmUgIT09IGFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihhY3RpdmUgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufShqUXVlcnkpKTtcclxuXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgJC5qQ2Fyb3VzZWwucGx1Z2luKCdqY2Fyb3VzZWxQYWdpbmF0aW9uJywge1xyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHBlclBhZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIGl0ZW06IGZ1bmN0aW9uKHBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj1cIiMnICsgcGFnZSArICdcIj4nICsgcGFnZSArICc8L2E+JztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXZlbnQ6ICAnY2xpY2snLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdzY3JvbGwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY2Fyb3VzZWxJdGVtczogbnVsbCxcclxuICAgICAgICBfcGFnZXM6IHt9LFxyXG4gICAgICAgIF9pdGVtczoge30sXHJcbiAgICAgICAgX2N1cnJlbnRQYWdlOiBudWxsLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVsb2FkID0gJC5wcm94eSh0aGlzLl9yZWxvYWQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uU2Nyb2xsID0gJC5wcm94eSh0aGlzLl91cGRhdGUsIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSlcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnJlbG9hZGVuZCcsIHRoaXMub25SZWxvYWQpXHJcbiAgICAgICAgICAgICAgICAub24oJ2pjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOnJlbG9hZGVuZCcsIHRoaXMub25SZWxvYWQpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6c2Nyb2xsZW5kJywgdGhpcy5vblNjcm9sbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyUGFnZSA9IHRoaXMub3B0aW9ucygncGVyUGFnZScpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcGFnZXMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5faXRlbXMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBwYWdlc1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHBlclBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJQYWdlID0gcGVyUGFnZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGVyUGFnZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYWdlcyA9IHRoaXMuX2NhbGN1bGF0ZVBhZ2VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHAgICAgPSBwYXJzZUludChwZXJQYWdlLCAxMCkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IHRoaXMuX2dldENhcm91c2VsSXRlbXMoKSxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlICA9IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgaSAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnI7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyID0gaXRlbXMuZXEoaSsrKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wYWdlc1twYWdlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlc1twYWdlXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFnZXNbcGFnZV0gPSB0aGlzLl9wYWdlc1twYWdlXS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIHBwID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiAgICAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWwgPSB0aGlzLmNhcm91c2VsKCkuZGF0YSgnamNhcm91c2VsJyksXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ICA9IHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBpdGVtICAgICA9IHRoaXMub3B0aW9ucygnaXRlbScpLFxyXG4gICAgICAgICAgICAgICAgbnVtQ2Fyb3VzZWxJdGVtcyA9IHRoaXMuX2dldENhcm91c2VsSXRlbXMoKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fcGFnZXMsIGZ1bmN0aW9uKHBhZ2UsIGNhcm91c2VsSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJySXRlbSA9IHNlbGYuX2l0ZW1zW3BhZ2VdID0gJChpdGVtLmNhbGwoc2VsZiwgcGFnZSwgY2Fyb3VzZWxJdGVtcykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGN1cnJJdGVtLm9uKHNlbGYub3B0aW9ucygnZXZlbnQnKSArICcuamNhcm91c2VscGFnaW5hdGlvbicsICQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGNhcm91c2VsSXRlbXMuZXEoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNpcmN1bGFyIHdyYXBwaW5nIGVuYWJsZWQsIGVuc3VyZSBjb3JyZWN0IHNjcm9sbGluZyBkaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2Fyb3VzZWwuY2lyY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IGNhcm91c2VsLmluZGV4KGNhcm91c2VsLnRhcmdldCgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ICAgICA9IGNhcm91c2VsLmluZGV4KHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChwYWdlKSA+IHBhcnNlRmxvYXQoc2VsZi5fY3VycmVudFBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPCBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSAnKz0nICsgKG51bUNhcm91c2VsSXRlbXMgLSBjdXJyZW50SW5kZXggKyBuZXdJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPiBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSAnLT0nICsgKGN1cnJlbnRJbmRleCArIChudW1DYXJvdXNlbEl0ZW1zIC0gbmV3SW5kZXgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWxbdGhpcy5vcHRpb25zKCdtZXRob2QnKV0odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH0sIHNlbGYpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZChjdXJySXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdXBkYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuY2Fyb3VzZWwoKS5qY2Fyb3VzZWwoJ3RhcmdldCcpLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fcGFnZXMsIGZ1bmN0aW9uKHBhZ2UsIGNhcm91c2VsSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGNhcm91c2VsSXRlbXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gcGFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFBhZ2UgIT09IGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdpbmFjdGl2ZScsIHRoaXMuX2l0ZW1zW3RoaXMuX2N1cnJlbnRQYWdlXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdhY3RpdmUnLCB0aGlzLl9pdGVtc1tjdXJyZW50UGFnZV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IGN1cnJlbnRQYWdlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWxvYWRDYXJvdXNlbEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2Fyb3VzZWxJdGVtcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5lbXB0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY2FsY3VsYXRlUGFnZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY2Fyb3VzZWwgPSB0aGlzLmNhcm91c2VsKCkuZGF0YSgnamNhcm91c2VsJyksXHJcbiAgICAgICAgICAgICAgICBpdGVtcyAgICA9IHRoaXMuX2dldENhcm91c2VsSXRlbXMoKSxcclxuICAgICAgICAgICAgICAgIGNsaXAgICAgID0gY2Fyb3VzZWwuY2xpcHBpbmcoKSxcclxuICAgICAgICAgICAgICAgIHdoICAgICAgID0gMCxcclxuICAgICAgICAgICAgICAgIGlkeCAgICAgID0gMCxcclxuICAgICAgICAgICAgICAgIHBhZ2UgICAgID0gMSxcclxuICAgICAgICAgICAgICAgIHBhZ2VzICAgID0ge30sXHJcbiAgICAgICAgICAgICAgICBjdXJyLFxyXG4gICAgICAgICAgICAgICAgZGltO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGN1cnIgPSBpdGVtcy5lcShpZHgrKyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGltID0gY2Fyb3VzZWwuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgod2ggKyBkaW0pID4gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UrKztcclxuICAgICAgICAgICAgICAgICAgICB3aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghcGFnZXNbcGFnZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlc1twYWdlXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzW3BhZ2VdID0gcGFnZXNbcGFnZV0uYWRkKGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcGFnZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZ2V0Q2Fyb3VzZWxJdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2Fyb3VzZWxJdGVtcyA9IHRoaXMuY2Fyb3VzZWwoKS5qY2Fyb3VzZWwoJ2l0ZW1zJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYXJvdXNlbEl0ZW1zO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQsIGRvY3VtZW50KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGhpZGRlblByb3AsXHJcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50LFxyXG4gICAgICAgIHZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWVzID0ge1xyXG4gICAgICAgICAgICBoaWRkZW46ICd2aXNpYmlsaXR5Y2hhbmdlJyxcclxuICAgICAgICAgICAgbW96SGlkZGVuOiAnbW96dmlzaWJpbGl0eWNoYW5nZScsXHJcbiAgICAgICAgICAgIG1zSGlkZGVuOiAnbXN2aXNpYmlsaXR5Y2hhbmdlJyxcclxuICAgICAgICAgICAgd2Via2l0SGlkZGVuOiAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSdcclxuICAgICAgICB9XHJcbiAgICA7XHJcblxyXG4gICAgJC5lYWNoKHZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWVzLCBmdW5jdGlvbihrZXksIHZhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaGlkZGVuUHJvcCA9IGtleTtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50ID0gdmFsO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5qQ2Fyb3VzZWwucGx1Z2luKCdqY2Fyb3VzZWxBdXRvc2Nyb2xsJywge1xyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHRhcmdldDogICAgJys9MScsXHJcbiAgICAgICAgICAgIGludGVydmFsOiAgMzAwMCxcclxuICAgICAgICAgICAgYXV0b3N0YXJ0OiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdGltZXI6IG51bGwsXHJcbiAgICAgICAgX3N0YXJ0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EZXN0cm95ID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDpjcmVhdGVlbmQnLCAkLnByb3h5KHRoaXMuX2NyZWF0ZSwgdGhpcykpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRlRW5kID0gJC5wcm94eSh0aGlzLl9zdGFydCwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSA9ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnRbaGlkZGVuUHJvcF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9uKHZpc2liaWxpdHlDaGFuZ2VFdmVudCwgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucygnYXV0b3N0YXJ0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9wKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpO1xyXG5cclxuICAgICAgICAgICAgJChkb2N1bWVudClcclxuICAgICAgICAgICAgICAgIC5vZmYodmlzaWJpbGl0eUNoYW5nZUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9wKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3N0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6YW5pbWF0ZWVuZCcsIHRoaXMub25BbmltYXRlRW5kKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgnc2Nyb2xsJywgdGhpcy5vcHRpb25zKCd0YXJnZXQnKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpLCB0aGlzLm9wdGlvbnMoJ2ludGVydmFsJykpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90aW1lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDphbmltYXRlZW5kJywgdGhpcy5vbkFuaW1hdGVFbmQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydCgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9wKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufShqUXVlcnksIGRvY3VtZW50KSk7XHJcbiQoZnVuY3Rpb24oKSB7XHJcbiAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQu9Cw0LnQtNC10YDQsFxyXG5cclxuICAkKCcuamNhcm91c2VsJykuamNhcm91c2VsKHtcclxuICAgIC8vINCR0LDQt9C+0LLRi9C1INC90LDRgdGC0YDQvtC50LrQuCDRgdC60YDQuNC/0YLQsCDQv9C40YjRg9GC0YHRjyDQt9C00LXRgdGMXHJcbiAgICAgIGFuaW1hdGlvbjogJ3Nsb3cnLFxyXG4gICAgICB3cmFwOiAnY2lyY3VsYXInXHJcbiAgfSk7XHJcblxyXG4gICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L/RgNC+0LrRgNGD0YLQutC4INGB0LvQsNC50LTQtdGA0LBcclxuXHJcbiAgJCgnLmpjYXJvdXNlbC1wcmV2JykuamNhcm91c2VsQ29udHJvbCh7XHJcbiAgICAgIHRhcmdldDogJy09MSdcclxuICB9KTtcclxuXHJcbiAgJCgnLmpjYXJvdXNlbC1uZXh0JykuamNhcm91c2VsQ29udHJvbCh7XHJcbiAgICAgIHRhcmdldDogJys9MSdcclxuICB9KTtcclxuXHJcbiAgICAvLyDQkNCy0YLQvtC/0YDQvtC60YDRg9GC0LrQsCDRgdC70LDQudC00LXRgNCwXHJcblxyXG4gICQoJy5qY2Fyb3VzZWwnKS5qY2Fyb3VzZWxBdXRvc2Nyb2xsKHtcclxuICAgICAgaW50ZXJ2YWw6IDUwMDAsXHJcbiAgICAgIHRhcmdldDogJys9MScsXHJcbiAgICAgIGF1dG9zdGFydDogdHJ1ZVxyXG4gIH0pO1xyXG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
