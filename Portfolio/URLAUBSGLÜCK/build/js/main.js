!function(t){"use strict";var i=t.jCarousel={};i.version="0.3.4";var e=/^([+\-]=)?(.+)$/;i.parseTarget=function(t){var i=!1,s="object"!=typeof t?e.exec(t):null;return s?(t=parseInt(s[2],10)||0,s[1]&&(i=!0,"-="===s[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:i}},i.detectCarousel=function(t){for(var i;t.length>0;){if(i=t.filter("[data-jcarousel]"),i.length>0)return i;if(i=t.find("[data-jcarousel]"),i.length>0)return i;t=t.parent()}return null},i.base=function(e){return{version:i.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+e.toLowerCase(),!0).data(e,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(e).removeAttr("data-"+e.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(i,e){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof i){if("undefined"==typeof e)return"undefined"==typeof this._options[i]?null:this._options[i];this._options[i]=e}else this._options=t.extend({},this._options,i);return this},carousel:function(){return this._carousel||(this._carousel=i.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+e+'"')),this._carousel},_trigger:function(i,s,r){var n,o=!1;return r=[this].concat(r||[]),(s||this._element).each(function(){n=t.Event((e+":"+i).toLowerCase()),t(this).trigger(n,r),n.isDefaultPrevented()&&(o=!0)}),!o}}},i.plugin=function(e,s){var r=t[e]=function(i,e){this._element=t(i),this.options(e),this._init(),this.create()};return r.fn=r.prototype=t.extend({},i.base(e),s),t.fn[e]=function(i){var s=Array.prototype.slice.call(arguments,1),n=this;return"string"==typeof i?this.each(function(){var r=t(this).data(e);if(!r)return t.error("Cannot call methods on "+e+' prior to initialization; attempted to call method "'+i+'"');if(!t.isFunction(r[i])||"_"===i.charAt(0))return t.error('No such method "'+i+'" for '+e+" instance");var o=r[i].apply(r,s);return o!==r&&"undefined"!=typeof o?(n=o,!1):void 0}):this.each(function(){var s=t(this).data(e);s instanceof r?s.reload(i):new r(this,i)}),n},r}}(jQuery),function(t,i){"use strict";var e=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(i).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(i).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(i){if("rtl"===(""+i.attr("dir")).toLowerCase())return!0;var e=!1;return i.parents("[dir]").each(function(){return/rtl/i.test(t(this).attr("dir"))?(e=!0,!1):void 0}),e}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var i=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var e={left:0,top:0};return i.length>0&&(this._prepare(i),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,e[this.lt]=this._position(i)+"px"),this.move(e),this},list:function(){if(null===this._list){var i=this.options("list");this._list=t.isFunction(i)?i.call(this):this._element.find(i)}return this._list},items:function(){if(null===this._items){var i=this.options("items");this._items=(t.isFunction(i)?i.call(this):this.list().find(i)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var i,s=this,r=this.list().position()[this.lt],n=t(),o=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(r+=this.list().width()-this.clipping()),this.items().each(function(){if(n=t(this),o)return!1;var l=s.dimension(n);if(r+=l,r>=0){if(i=l-e(n.css("margin-"+a)),!(Math.abs(r)-l+i/2<=0))return!1;o=!0}}),n},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),i=this.items().length-1,e=this.options("center")?this._target:this._last;return!!(i>=0&&!this.underflow&&(t&&"first"!==t||this.index(e)<i||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(i,e,s){if(this.animating)return this;if(!1===this._trigger("scroll",null,[i,e]))return this;t.isFunction(e)&&(s=e,e=!0);var r=t.jCarousel.parseTarget(i);if(r.relative){var n,o,a,l,h,u,c,f,d=this.items().length-1,p=Math.abs(r.target),_=this.options("wrap");if(r.target>0){var g=this.index(this._last);if(g>=d&&this.tail)this.inTail?"both"===_||"last"===_?this._scroll(0,e,s):t.isFunction(s)&&s.call(this,!1):this._scrollTail(e,s);else if(n=this.index(this._target),this.underflow&&n===d&&("circular"===_||"both"===_||"last"===_)||!this.underflow&&g===d&&("both"===_||"last"===_))this._scroll(0,e,s);else if(a=n+p,this.circular&&a>d){for(f=d,h=this.items().get(-1);f++<a;)h=this.items().eq(0),u=this._visible.index(h)>=0,u&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(h),u||(c={},c[this.lt]=this.dimension(h),this.moveBy(c)),this._items=null;this._scroll(h,e,s)}else this._scroll(Math.min(a,d),e,s)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-p+1,0),e,s);else if(o=this.index(this._first),n=this.index(this._target),l=this.underflow?n:o,a=l-p,0>=l&&(this.underflow&&"circular"===_||"both"===_||"first"===_))this._scroll(d,e,s);else if(this.circular&&0>a){for(f=a,h=this.items().get(0);f++<0;){h=this.items().eq(-1),u=this._visible.index(h)>=0,u&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(h),this._items=null;var m=this.dimension(h);c={},c[this.lt]=-m,this.moveBy(c)}this._scroll(h,e,s)}else this._scroll(Math.max(a,0),e,s)}else this._scroll(r.target,e,s);return this._trigger("scrollend"),this},moveBy:function(t,i){var s=this.list().position(),r=1,n=0;return this.rtl&&!this.vertical&&(r=-1,this.relative&&(n=this.list().width()-this.clipping())),t.left&&(t.left=s.left+n+e(t.left)*r+"px"),t.top&&(t.top=s.top+n+e(t.top)*r+"px"),this.move(t,i)},move:function(i,e){e=e||{};var s=this.options("transitions"),r=!!s,n=!!s.transforms,o=!!s.transforms3d,a=e.duration||0,l=this.list();if(!r&&a>0)return void l.animate(i,e);var h=e.complete||t.noop,u={};if(r){var c={transitionDuration:l.css("transitionDuration"),transitionTimingFunction:l.css("transitionTimingFunction"),transitionProperty:l.css("transitionProperty")},f=h;h=function(){t(this).css(c),f.call(this)},u={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:s.easing||e.easing,transitionProperty:a>0?function(){return n||o?"all":i.left?"left":"top"}():"none",transform:"none"}}o?u.transform="translate3d("+(i.left||0)+","+(i.top||0)+",0)":n?u.transform="translate("+(i.left||0)+","+(i.top||0)+")":t.extend(u,i),r&&a>0&&l.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",h),l.css(u),0>=a&&l.each(function(){h.call(this)})},_scroll:function(i,e,s){if(this.animating)return t.isFunction(s)&&s.call(this,!1),this;if("object"!=typeof i?i=this.items().eq(i):"undefined"==typeof i.jquery&&(i=t(i)),0===i.length)return t.isFunction(s)&&s.call(this,!1),this;this.inTail=!1,this._prepare(i);var r=this._position(i),n=this.list().position()[this.lt];if(r===n)return t.isFunction(s)&&s.call(this,!1),this;var o={};return o[this.lt]=r+"px",this._animate(o,e,s),this},_scrollTail:function(i,e){if(this.animating||!this.tail)return t.isFunction(e)&&e.call(this,!1),this;var s=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(s+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?s+=this.tail:s-=this.tail,this.inTail=!0;var r={};return r[this.lt]=s+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(r,i,e),this},_animate:function(i,e,s){if(s=s||t.noop,!1===this._trigger("animate"))return s.call(this,!1),this;this.animating=!0;var r=this.options("animation"),n=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),s.call(this,!0)},this),o="object"==typeof r?t.extend({},r):{duration:r},a=o.complete||t.noop;return e===!1?o.duration=0:"undefined"!=typeof t.fx.speeds[o.duration]&&(o.duration=t.fx.speeds[o.duration]),o.complete=function(){n(),a.call(this)},this.move(i,o),this},_prepare:function(i){var s,r,n,o,a=this.index(i),l=a,h=this.dimension(i),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",f=this.options("center"),d={target:i,first:i,last:i,visible:i,fullyvisible:u>=h?i:t()};if(f&&(h/=2,u/=2),u>h)for(;;){if(s=this.items().eq(++l),0===s.length){if(!this.circular)break;if(s=this.items().eq(0),i.get(0)===s.get(0))break;if(r=this._visible.index(s)>=0,r&&s.after(s.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(s),!r){var p={};p[this.lt]=this.dimension(s),this.moveBy(p)}this._items=null}if(o=this.dimension(s),0===o)break;if(h+=o,d.last=s,d.visible=d.visible.add(s),n=e(s.css("margin-"+c)),u>=h-n&&(d.fullyvisible=d.fullyvisible.add(s)),h>=u)break}if(!this.circular&&!f&&u>h)for(l=a;;){if(--l<0)break;if(s=this.items().eq(l),0===s.length)break;if(o=this.dimension(s),0===o)break;if(h+=o,d.first=s,d.visible=d.visible.add(s),n=e(s.css("margin-"+c)),u>=h-n&&(d.fullyvisible=d.fullyvisible.add(s)),h>=u)break}return this._update(d),this.tail=0,f||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(d.last)!==this.items().length-1||(h-=e(d.last.css("margin-"+c)),h>u&&(this.tail=h-u)),this},_position:function(t){var i=this._first,e=i.position()[this.lt],s=this.options("center"),r=s?this.clipping()/2-this.dimension(i)/2:0;return this.rtl&&!this.vertical?(e-=this.relative?this.list().width()-this.dimension(i):this.clipping()-this.dimension(i),e+=r):e-=r,!s&&(this.index(t)>this.index(i)||this.inTail)&&this.tail?(e=this.rtl&&!this.vertical?e-this.tail:e+this.tail,this.inTail=!0):this.inTail=!1,-e},_update:function(i){var e,s=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},n=this.index(i.first||r.first)<this.index(r.first),o=function(e){var o=[],a=[];i[e].each(function(){r[e].index(this)<0&&o.push(this)}),r[e].each(function(){i[e].index(this)<0&&a.push(this)}),n?o=o.reverse():a=a.reverse(),s._trigger(e+"in",t(o)),s._trigger(e+"out",t(a)),s["_"+e]=i[e]};for(e in i)o(e);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(i,e,s){var r,n=t.jCarousel.parseTarget(i),o=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(r=n.relative?n.target<0?Math.max(0,o+n.target):a+n.target:"object"!=typeof n.target?n.target:this.index(n.target),o>r)return this.scroll(r,e,s);if(r>=o&&a>=r)return t.isFunction(s)&&s.call(this,!1),this;for(var l,h=this.items(),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",f=0;;){if(l=h.eq(r),0===l.length)break;if(f+=this.dimension(l),f>=u){var d=parseFloat(l.css("margin-"+c))||0;f-d!==u&&r++;break}if(0>=r)break;r--}return this.scroll(r,e,s)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(i){i.preventDefault();var e=this.options("method");t.isFunction(e)?e.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var i,e=t.jCarousel.parseTarget(this.options("target")),s=this.carousel();if(e.relative)i=s.jcarousel(e.target>0?"hasNext":"hasPrev");else{var r="object"!=typeof e.target?s.jcarousel("items").eq(e.target):e.target;i=s.jcarousel("target").index(r)>=0}return this._active!==i&&(this._trigger(i?"active":"inactive"),this._active=i),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var i=this.options("perPage");if(this._pages={},this._items={},t.isFunction(i)&&(i=i.call(this)),null==i)this._pages=this._calculatePages();else for(var e,s=parseInt(i,10)||0,r=this._getCarouselItems(),n=1,o=0;;){if(e=r.eq(o++),0===e.length)break;this._pages[n]?this._pages[n]=this._pages[n].add(e):this._pages[n]=e,o%s===0&&n++}this._clear();var a=this,l=this.carousel().data("jcarousel"),h=this._element,u=this.options("item"),c=this._getCarouselItems().length;t.each(this._pages,function(i,e){var s=a._items[i]=t(u.call(a,i,e));s.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=e.eq(0);if(l.circular){var s=l.index(l.target()),r=l.index(t);parseFloat(i)>parseFloat(a._currentPage)?s>r&&(t="+="+(c-s+r)):r>s&&(t="-="+(s+(c-r)))}l[this.options("method")](t)},a)),h.append(s)}),this._update()},_update:function(){var i,e=this.carousel().jcarousel("target");t.each(this._pages,function(t,s){return s.each(function(){return e.is(this)?(i=t,!1):void 0}),i?!1:void 0}),this._currentPage!==i&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[i])),this._currentPage=i},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,i,e=this.carousel().data("jcarousel"),s=this._getCarouselItems(),r=e.clipping(),n=0,o=0,a=1,l={};;){if(t=s.eq(o++),0===t.length)break;i=e.dimension(t),n+i>r&&(a++,n=0),n+=i,l[a]?l[a]=l[a].add(t):l[a]=t}return l},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,i){"use strict";var e,s,r={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(r,function(t,r){return"undefined"!=typeof i[t]?(e=t,s=r,!1):void 0}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){i[e]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(i).on(s,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(i).off(s,this.onVisibilityChange)},_start:function(){return this._stop(),this._started?(this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this):void 0},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(){var t={};this.tmpl=function i(e,s){var r=/\W/.test(e)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+e.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):t[e]=t[e]||i(document.getElementById(e).innerHTML);return s?r(s):r}}(),$(function(){function t(t){$.ajax({type:"GET",dataType:"json",cache:!1,url:"http://api.pixplorer.co.uk/image?word="+t+"&amount=7&size=tb",success:function(t){"failed"===t.status&&(t=mockData);var i=$("#ideas-template").html(),e=tmpl(i,{data:t.images});$(".grid").remove(),$(".discover .discover-wrapper").append(e),$(".grid").isotope({itemSelector:".tile--ideas",layoutMode:"masonry",masonry:{gutter:20}})},error:function(){console.log("Sorry, images API isn't working!")}})}$(".jcarousel").jcarousel({animation:"slow",wrap:"circular"}),$(".jcarousel-prev").jcarouselControl({target:"-=1"}),$(".jcarousel-next").jcarouselControl({target:"+=1"}),$(".jcarousel").jcarouselAutoscroll({interval:5e3,target:"+=1",autostart:!0});$(".activities-search__button").on("click",function(i){i.preventDefault();var e=$(".activities-search__input");t(encodeURIComponent(e.val())),e.val("")}),t()});var mockData={images:[{imageurl:"img/ideas1.png",word:"Sport"},{imageurl:"img/ideas2.png",word:"Wellnes"},{imageurl:"img/ideas3.png",word:"Extreme Sports"},{imageurl:"img/ideas4.png",word:"Games"},{imageurl:"img/ideas5.png",word:"Culture"},{imageurl:"img/ideas6.png",word:"Relaxation"},{imageurl:"img/ideas7.png",word:"Travelling"}]};
//# sourceMappingURL=data:application/json;base64,
